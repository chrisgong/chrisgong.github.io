<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gc&#39;s blog</title>
  <subtitle>Discontent is the first step in progress.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gcblog.cn/"/>
  <updated>2016-07-10T12:49:09.000Z</updated>
  <id>http://gcblog.cn/</id>
  
  <author>
    <name>Gc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Native基础 (三)</title>
    <link href="http://gcblog.cn/2016/07/09/react-native4/"/>
    <id>http://gcblog.cn/2016/07/09/react-native4/</id>
    <published>2016-07-09T13:43:45.000Z</published>
    <updated>2016-07-10T12:49:09.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;特定平台代码&quot;&gt;&lt;a href=&quot;#特定平台代码&quot; class=&quot;headerlink&quot; title=&quot;特定平台代码&quot;&gt;&lt;/a&gt;特定平台代码&lt;/h1&gt;&lt;p&gt;在制作跨平台的App时，多半会碰到针对不同平台编写不同代码的需求。最直接的方案就是把组件放置到不同的文件夹下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/common/components/   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/android/components/   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/ios/components/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另一个选择是根据平台不同在组件的文件命名上加以区分，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BigButtonIOS.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigButtonAndroid.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但除此以外React Native还提供了另外两种简单区分平台的方案：&lt;/p&gt;
&lt;h1 id=&quot;特定平台扩展名&quot;&gt;&lt;a href=&quot;#特定平台扩展名&quot; class=&quot;headerlink&quot; title=&quot;特定平台扩展名&quot;&gt;&lt;/a&gt;特定平台扩展名&lt;/h1&gt;&lt;p&gt;React Native会检测某个文件是否具有.ios.或是.android.的扩展名，然后根据当前运行的平台加载正确对应的文件。&lt;/p&gt;
&lt;p&gt;假设你的项目中有如下两个文&lt;/p&gt;
&lt;p&gt;BigButton.ios.js&lt;br&gt;BigButton.android.js&lt;/p&gt;
&lt;p&gt;这样命名组件后你就可以在其他组件中直接引用，而无需关心当前运行的平台是哪个。&lt;/p&gt;
&lt;p&gt;import BigButton from ‘./components/BigButton’;&lt;/p&gt;
&lt;p&gt;React Native会根据运行平台的不同引入正确对应的组件。&lt;/p&gt;
&lt;p&gt;还有个实用的方法是Platform.select()，它可以以Platform.OS为key，从传入的对象中返回对应平台的值，见下面的示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var &amp;#123; Platform &amp;#125; = React;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var styles = StyleSheet.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  container: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    flex: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...Platform.select(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ios: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        backgroundColor: &amp;apos;red&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      android: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        backgroundColor: &amp;apos;blue&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码会根据平台的不同返回不同的container样式——iOS上背景色为红色，而android为蓝色。&lt;/p&gt;
&lt;p&gt;这一方法可以接受任何合法类型的参数，因此你也可以直接用它针对不同平台返回不同的组件，像下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var Component = Platform.select(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ios: () =&amp;gt; require(&amp;apos;ComponentIOS&amp;apos;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  android: () =&amp;gt; require(&amp;apos;ComponentAndroid&amp;apos;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Component /&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;平台模块&quot;&gt;&lt;a href=&quot;#平台模块&quot; class=&quot;headerlink&quot; title=&quot;平台模块&quot;&gt;&lt;/a&gt;平台模块&lt;/h1&gt;&lt;p&gt;React Native提供了一个检测当前运行平台的模块。如果组件只有一小部分代码需要依据平台定制，那么这个模块就可以派上用场。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123; Platform &amp;#125; from &amp;apos;react-native&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var styles = StyleSheet.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height: (Platform.OS === &amp;apos;ios&amp;apos;) ? 200 : 100,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Platform.OS在iOS上会返回ios，而在Android设备或模拟器上则会返回android。&lt;/p&gt;
&lt;h2 id=&quot;检测Android版本&quot;&gt;&lt;a href=&quot;#检测Android版本&quot; class=&quot;headerlink&quot; title=&quot;检测Android版本&quot;&gt;&lt;/a&gt;检测Android版本&lt;/h2&gt;&lt;p&gt;在Android上，平台模块还可以用来检测当前所运行的Android平台的版本：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123; Platform &amp;#125; from &amp;apos;react-native&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if(Platform.Version === 21)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(&amp;apos;Running on Lollipop!&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Android原生模块&quot;&gt;&lt;a href=&quot;#Android原生模块&quot; class=&quot;headerlink&quot; title=&quot;Android原生模块&quot;&gt;&lt;/a&gt;Android原生模块&lt;/h1&gt;&lt;p&gt;有时候App需要访问平台API，但React Native可能还没有相应的模块包装；或者你需要复用一些Java代码，而不是用Javascript重新实现一遍；又或者你需要实现某些高性能的、多线程的代码，譬如图片处理、数据库、或者各种高级扩展等等。&lt;/p&gt;
&lt;p&gt;我们把React Native设计为可以在其基础上编写真正的原生代码，并且可以访问平台所有的能力。这是一个相对高级的特性，我们并不认为它应当在日常开发的过程中经常出现，但具备这样的能力是很重要的。如果React Native还不支持某个你需要的原生特性，你应当可以自己实现该特性的封装。&lt;/p&gt;
&lt;h2 id=&quot;Toast模块&quot;&gt;&lt;a href=&quot;#Toast模块&quot; class=&quot;headerlink&quot; title=&quot;Toast模块&quot;&gt;&lt;/a&gt;Toast模块&lt;/h2&gt;&lt;p&gt;本向导会用Toast作为例子。假设我们希望可以从Javascript发起一个Toast消息（Android中的一种会在屏幕下方弹出、保持一段时间的消息通知）&lt;/p&gt;
&lt;p&gt;我们首先来创建一个原生模块。一个原生模块是一个继承了ReactContextBaseJavaModule的Java类，它可以实现一些JavaScript所需的功能。我们这里的目标是可以在JavaScript里写ToastAndroid.show(‘Awesome’, ToastAndroid.SHORT);，来调起一个Toast通知。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package com.facebook.react.modules.toast;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import android.widget.Toast;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import com.facebook.react.bridge.NativeModule;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import com.facebook.react.bridge.ReactApplicationContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import com.facebook.react.bridge.ReactContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import com.facebook.react.bridge.ReactContextBaseJavaModule;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import com.facebook.react.bridge.ReactMethod;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.util.Map;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ToastModule extends ReactContextBaseJavaModule &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  private static final String DURATION_SHORT_KEY = &amp;quot;SHORT&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  private static final String DURATION_LONG_KEY = &amp;quot;LONG&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public ToastModule(ReactApplicationContext reactContext) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super(reactContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ReactContextBaseJavaModule要求派生类实现getName方法。这个函数用于返回一个字符串名字，这个名字在JavaScript端标记这个模块。这里我们把这个模块叫做ToastAndroid，这样就可以在JavaScript中通过React.NativeModules.ToastAndroid访问到这个模块。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public String getName() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &amp;quot;ToastAndroid&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;译注：模块名前的RCT前缀会被自动移除。所以如果返回的字符串为”RCTToastAndroid”，在JavaScript端依然通过React.NativeModules.ToastAndroid访问到这个模块。&lt;/p&gt;
&lt;p&gt;一个可选的方法getContants返回了需要导出给JavaScript使用的常量。它并不一定需要实现，但在定义一些可以被JavaScript同步访问到的预定义的值时非常有用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public Map&amp;lt;String, Object&amp;gt; getConstants() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final Map&amp;lt;String, Object&amp;gt; constants = new HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return constants;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要导出一个方法给JavaScript使用，Java方法需要使用注解@ReactMethod。方法的返回类型必须为void。React Native的跨语言访问是异步进行的，所以想要给JavaScript返回一个值的唯一办法是使用回调函数或者发送事件（参见下文的描述）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@ReactMethod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void show(String message, int duration) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Toast.makeText(getReactApplicationContext(), message, duration).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参数类型&quot;&gt;&lt;a href=&quot;#参数类型&quot; class=&quot;headerlink&quot; title=&quot;参数类型&quot;&gt;&lt;/a&gt;参数类型&lt;/h2&gt;&lt;p&gt;下面的参数类型在@ReactMethod注明的方法中，会被直接映射到它们对应的JavaScript类型。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Boolean -&amp;gt; Bool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Integer -&amp;gt; Number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Double -&amp;gt; Number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Float -&amp;gt; Number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String -&amp;gt; String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Callback -&amp;gt; function&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReadableMap -&amp;gt; Object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReadableArray -&amp;gt; Array&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参阅&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableMap.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReadableMap&lt;/a&gt;和&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableArray.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReadableArray&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;注册模块&quot;&gt;&lt;a href=&quot;#注册模块&quot; class=&quot;headerlink&quot; title=&quot;注册模块&quot;&gt;&lt;/a&gt;注册模块&lt;/h2&gt;&lt;p&gt;在Java这边要做的最后一件事就是注册这个模块。我们需要在应用的Package类的createNativeModules方法中添加这个模块。如果模块没有被注册，它也无法在JavaScript中被访问到。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class AnExampleReactPackage implements ReactPackage &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public List&amp;lt;Class&amp;lt;? extends JavaScriptModule&amp;gt;&amp;gt; createJSModules() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return Collections.emptyList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public List&amp;lt;ViewManager&amp;gt; createViewManagers(ReactApplicationContext reactContext) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return Collections.emptyList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public List&amp;lt;NativeModule&amp;gt; createNativeModules(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              ReactApplicationContext reactContext) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;NativeModule&amp;gt; modules = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    modules.add(new ToastModule(reactContext));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return modules;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个package需要在MainActivity.java文件的getPackages方法中提供。这个文件位于你的react-native应用文件夹的android目录中。具体路径是: android/app/src/main/java/com/your-app-name/MainActivity.java.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;protected List&amp;lt;ReactPackage&amp;gt; getPackages() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return Arrays.&amp;lt;ReactPackage&amp;gt;asList(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            new MainReactPackage(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            new AnExampleReactPackage()); // &amp;lt;-- 添加这一行，类名替换成你的Package类的名字.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了让你的功能从JavaScript端访问起来更为方便，通常我们都会把原生模块封装成一个JavaScript模块。这不是必须的，但省下了每次都从NativeModules中获取对应模块的步骤。这个JS文件也可以用于添加一些其他JavaScript端实现的功能。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;use strict&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * This exposes the native ToastAndroid module as a JS module. This has a function &amp;apos;show&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * which takes the following parameters:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 1. String message: A string with the text to toast&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 2. int duration: The duration of the toast. May be ToastAndroid.SHORT or ToastAndroid.LONG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &amp;#123; NativeModules &amp;#125; = require(&amp;apos;react-native&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module.exports = NativeModules.ToastAndroid;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，在别处的JavaScript代码中可以这样调用你的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var ToastAndroid = require(&amp;apos;./ToastAndroid&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ToastAndroid.show(&amp;apos;Awesome&amp;apos;, ToastAndroid.SHORT);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;更多特性&quot;&gt;&lt;a href=&quot;#更多特性&quot; class=&quot;headerlink&quot; title=&quot;更多特性&quot;&gt;&lt;/a&gt;更多特性&lt;/h2&gt;&lt;h3 id=&quot;回调函数&quot;&gt;&lt;a href=&quot;#回调函数&quot; class=&quot;headerlink&quot; title=&quot;回调函数&quot;&gt;&lt;/a&gt;回调函数&lt;/h3&gt;&lt;p&gt;原生模块还支持一种特殊的参数——回调函数。它提供了一个函数来把返回值传回给JavaScript。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class UIManagerModule extends ReactContextBaseJavaModule &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@ReactMethod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void measureLayout(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int tag,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int ancestorTag,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Callback errorCallback,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Callback successCallback) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				measureLayout(tag, ancestorTag, mMeasureBuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				float relativeX = PixelUtil.toDIPFromPixel(mMeasureBuffer[0]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				float relativeY = PixelUtil.toDIPFromPixel(mMeasureBuffer[1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				float width = PixelUtil.toDIPFromPixel(mMeasureBuffer[2]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				float height = PixelUtil.toDIPFromPixel(mMeasureBuffer[3]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				successCallback.invoke(relativeX, relativeY, width, height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; catch (IllegalViewOperationException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				errorCallback.invoke(e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个函数可以在JavaScript里这样使用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UIManager.measureLayout(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  100,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  100,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (msg) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (x, y, width, height) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(x + &amp;apos;:&amp;apos; + y + &amp;apos;:&amp;apos; + width + &amp;apos;:&amp;apos; + height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原生模块通常只应调用回调函数一次。但是，它可以保存callback并在将来调用。&lt;/p&gt;
&lt;p&gt;请务必注意callback并非在对应的原生函数返回后立即被执行——注意跨语言通讯是异步的，这个执行过程会通过消息循环来进行。&lt;/p&gt;
&lt;h2 id=&quot;Promises&quot;&gt;&lt;a href=&quot;#Promises&quot; class=&quot;headerlink&quot; title=&quot;Promises&quot;&gt;&lt;/a&gt;Promises&lt;/h2&gt;&lt;p&gt;译注：这一部分涉及到较新的js语法和特性，不熟悉的读者建议先阅读ES6的相关书籍和文档。&lt;/p&gt;
&lt;p&gt;原生模块还可以使用promise来简化代码，搭配ES2016(ES7)标准的async/await语法则效果更佳。如果桥接原生方法的最后一个参数是一个Promise，则对应的JS方法就会返回一个Promise对象。&lt;/p&gt;
&lt;p&gt;我们把上面的代码用promise来代替回调进行重构：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class UIManagerModule extends ReactContextBaseJavaModule &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @ReactMethod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void measureLayout(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      int tag,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      int ancestorTag,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Promise promise) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      measureLayout(tag, ancestorTag, mMeasureBuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      WritableMap map = Arguments.createMap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      map.putDouble(&amp;quot;relativeX&amp;quot;, PixelUtil.toDIPFromPixel(mMeasureBuffer[0]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      map.putDouble(&amp;quot;relativeY&amp;quot;, PixelUtil.toDIPFromPixel(mMeasureBuffer[1]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      map.putDouble(&amp;quot;width&amp;quot;, PixelUtil.toDIPFromPixel(mMeasureBuffer[2]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      map.putDouble(&amp;quot;height&amp;quot;, PixelUtil.toDIPFromPixel(mMeasureBuffer[3]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      promise.resolve(map);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch (IllegalViewOperationException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      promise.reject(e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在JavaScript端的方法会返回一个Promise。这样你就可以在一个声明了async的异步函数内使用await关键字来调用，并等待其结果返回。（虽然这样写着看起来像同步操作，但实际仍然是异步的，并不会阻塞执行来等待）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;async function measureLayout() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      relativeX,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      relativeY,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      width,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      height,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; = await UIManager.measureLayout(100, 100);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(relativeX + &amp;apos;:&amp;apos; + relativeY + &amp;apos;:&amp;apos; + width + &amp;apos;:&amp;apos; + height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; catch (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.error(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;measureLayout();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h2&gt;&lt;p&gt;原生模块不应对自己被调用时所处的线程做任何假设，当前的状况有可能会在将来的版本中改变。如果一个过程要阻塞执行一段时间，这个工作应当分配到一个内部管理的工作线程，然后从那边可以调用任意的回调函数。译注：我们通常用AsyncTask来完成这项工作。&lt;/p&gt;
&lt;h2 id=&quot;发送事件到JavaScript&quot;&gt;&lt;a href=&quot;#发送事件到JavaScript&quot; class=&quot;headerlink&quot; title=&quot;发送事件到JavaScript&quot;&gt;&lt;/a&gt;发送事件到JavaScript&lt;/h2&gt;&lt;p&gt;原生模块可以在没有被调用的情况下往JavaScript发送事件通知。最简单的办法就是通过RCTDeviceEventEmitter，这可以通过ReactContext来获得对应的引用，像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void sendEvent(ReactContext reactContext,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       String eventName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       @Nullable WritableMap params) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  reactContext&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .emit(eventName, params);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WritableMap params = Arguments.createMap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sendEvent(reactContext, &amp;quot;keyboardWillShow&amp;quot;, params);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;JavaScript模块可以通过Subscribablemixin的addListenerOn方法来接受事件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var &amp;#123; DeviceEventEmitter &amp;#125; = require(&amp;apos;react-native&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ScrollResponderMixin = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mixins: [Subscribable.Mixin],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  componentWillMount: function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.addListenerOn(DeviceEventEmitter,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &amp;apos;keyboardWillShow&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       this.scrollResponderKeyboardWillShow);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scrollResponderKeyboardWillShow:function(e: Event) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.keyboardWillOpenTo = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.props.onKeyboardWillShow &amp;amp;&amp;amp; this.props.onKeyboardWillShow(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你还可以直接使用DeviceEventEmitter模块来监听事件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentWillMount: function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DeviceEventEmitter.addListener(&amp;apos;keyboardWillShow&amp;apos;, function(e: Event) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // handle event.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;特定平台代码&quot;&gt;&lt;a href=&quot;#特定平台代码&quot; class=&quot;headerlink&quot; title=&quot;特定平台代码&quot;&gt;&lt;/a&gt;特定平台代码&lt;/h1&gt;&lt;p&gt;在制作跨平台的App时，多半会碰到针对不同平台编写不同代码的需求。最直接的方案就是把组件放置到不同的文件夹下
    
    </summary>
    
      <category term="React Native" scheme="http://gcblog.cn/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://gcblog.cn/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native基础 (二)</title>
    <link href="http://gcblog.cn/2016/07/09/react-native3/"/>
    <id>http://gcblog.cn/2016/07/09/react-native3/</id>
    <published>2016-07-09T12:34:36.000Z</published>
    <updated>2016-07-09T13:38:12.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;动画&quot;&gt;&lt;a href=&quot;#动画&quot; class=&quot;headerlink&quot; title=&quot;动画&quot;&gt;&lt;/a&gt;动画&lt;/h1&gt;&lt;h1 id=&quot;Animated&quot;&gt;&lt;a href=&quot;#Animated&quot; class=&quot;headerlink&quot; title=&quot;Animated&quot;&gt;&lt;/a&gt;Animated&lt;/h1&gt;&lt;p&gt;Animated库使得开发者可以非常容易地实现各种各样的动画和交互方式，并且具备极高的性能。Animated仅关注动画的输入与输出声明，在其中建立一个可配置的变化函数，然后使用简单的start/stop方法来控制动画按顺序执行。下面是一个在加载时带有简单的弹跳动画的组件示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Playground extends React.Component &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(props: any) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      bounceValue: new Animated.Value(0),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render(): ReactElement &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;Animated.Image                         // 可选的基本组件类型: Image, Text, View&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source=&amp;#123;&amp;#123;uri: &amp;apos;http://i.imgur.com/XMKOH81.jpg&amp;apos;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        style=&amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          flex: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          transform: [                        // `transform`是一个有序数组（动画按顺序执行）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;scale: this.state.bounceValue&amp;#125;,  // 将`bounceValue`赋值给 `scale`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  componentDidMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.state.bounceValue.setValue(1.5);     // 设置一个较大的初始值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Animated.spring(                          // 可选的基本动画类型: spring, decay, timing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      this.state.bounceValue,                 // 将`bounceValue`值动画化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toValue: 0.8,                         // 将其值以动画的形式改到一个较小值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        friction: 1,                          // Bouncier spring&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ).start();                                // 开始执行动画&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;bounceValue在构造函数中初始化为state的一部分，然后和图片的缩放比例进行绑定。在动画执行的背后，其数值会被不断的计算并用于设置缩放比例。当组件刚刚挂载的时候，缩放比例被设置到1.5。然后紧跟着在bounceValue上执行了一个弹跳动画(spring)，会逐帧刷新数值，并同步更新所有依赖本数值的绑定（在这个例子里，就是图片的缩放比例）。比起调用setState然后重新渲染，这一运行过程要快得多。因为整个配置都是声明式的，我们可以实现更进一步的优化，只要序列化好配置，然后我们可以在一个高优先级的线程执行动画。&lt;/p&gt;
&lt;h2 id=&quot;核心API&quot;&gt;&lt;a href=&quot;#核心API&quot; class=&quot;headerlink&quot; title=&quot;核心API&quot;&gt;&lt;/a&gt;核心API&lt;/h2&gt;&lt;p&gt;大部分你需要的东西都来自Animated模块。它包括两个值类型，Value用于单个的值，而ValueXY用于向量值；还包括三种动画类型，spring，decay，还有timing，以及三种组件类型，View，Text和Image。你可以使用Animated.createAnimatedComponent方法来对其它类型的组件创建动画。&lt;/p&gt;
&lt;p&gt;这三种动画类型可以用来创建几乎任何你需要的动画曲线，因为它们每一个都可以被自定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spring: 基础的单次弹跳物理模型，符合&lt;a href=&quot;https://facebook.github.io/origami/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Origami设计标准&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;friction: 摩擦力，默认为7.&lt;/li&gt;
&lt;li&gt;tension: 张力，默认40。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;decay: 以一个初始速度开始并且逐渐减慢停止。&lt;ul&gt;
&lt;li&gt;velocity: 起始速度，必填参数。&lt;/li&gt;
&lt;li&gt;deceleration: 速度衰减比例，默认为0.997。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;timing: 从时间范围映射到渐变的值。&lt;ul&gt;
&lt;li&gt;duration: 动画持续的时间（单位是毫秒），默认为500。&lt;/li&gt;
&lt;li&gt;easing：一个用于定义曲线的渐变函数。阅读Easing模块可以找到许多预定义的函数。iOS默认为Easing.inOut(Easing.ease)。&lt;/li&gt;
&lt;li&gt;delay: 在一段时间之后开始动画（单位是毫秒），默认为0。&lt;br&gt;动画可以通过调用start方法来开始。start接受一个回调函数，当动画结束的时候会调用此回调函数。如果动画是因为正常播放完成而结束的，回调函数被调用时的参数为{finished: true}，但若动画是在结束之前被调用了stop而结束（可能是被一个手势或者其它的动画打断），它会收到参数{finished: false}。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;组合动画&quot;&gt;&lt;a href=&quot;#组合动画&quot; class=&quot;headerlink&quot; title=&quot;组合动画&quot;&gt;&lt;/a&gt;组合动画&lt;/h2&gt;&lt;p&gt;多个动画可以通过parallel（同时执行）、sequence（顺序执行）、stagger（交替执行）和delay（延时执行）来组合使用。它们中的每一个都接受一个要执行的动画数组，并且自动在适当的时候调用start/stop。举个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Animated.sequence([            // 首先执行decay动画，结束后同时执行spring和twirl动画&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Animated.decay(position, &amp;#123;   // 滑行一段距离后停止&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    velocity: &amp;#123;x: gestureState.vx, y: gestureState.vy&amp;#125;, // 根据用户的手势设置速度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    deceleration: 0.997,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Animated.parallel([          // 在decay之后并行执行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Animated.spring(position, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      toValue: &amp;#123;x: 0, y: 0&amp;#125;    // 返回到起始点开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Animated.timing(twirl, &amp;#123;   // 同时开始旋转&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      toValue: 360,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]).start();                    // 执行这一整套动画序列&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认情况下，如果任何一个动画被停止或中断了，组内所有其它的动画也会被停止。Parallel有一个stopTogether属性，如果设置为false，可以禁用自动停止。&lt;/p&gt;
&lt;h2 id=&quot;插值（interpolate）&quot;&gt;&lt;a href=&quot;#插值（interpolate）&quot; class=&quot;headerlink&quot; title=&quot;插值（interpolate）&quot;&gt;&lt;/a&gt;插值（interpolate）&lt;/h2&gt;&lt;p&gt;Animated API还有一个很强大的部分就是interpolate插值函数。它可以接受一个输入区间，然后将其映射到另一个的输出区间。下面是一个一个简单的从0-1区间到0-100区间的映射示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;value.interpolate(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  inputRange: [0, 1],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  outputRange: [0, 100],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;interpolate还支持定义多个区间段落，常用来定义静止区间等。举个例子，要让输入在接近-300时取相反值，然后在输入接近-100时到达0，然后在输入接近0时又回到1，接着一直到输入到100的过程中逐步回到0，最后形成一个始终为0的静止区间，对于任何大于100的输入都返回0。具体写法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;value.interpolate(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  inputRange: [-300, -100, 0, 100, 101],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  outputRange: [300,    0, 1,   0,   0],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它的最终映射结果如下：&lt;/p&gt;
&lt;p&gt;输入    输出&lt;br&gt;-400    450&lt;br&gt;-300    300&lt;br&gt;-200    150&lt;br&gt;-100    0&lt;br&gt;-50    0.5&lt;br&gt;0    1&lt;br&gt;50    0.5&lt;br&gt;100    0&lt;br&gt;101    0&lt;br&gt;200    0&lt;br&gt;interpolation还支持任意的渐变函数，其中有很多已经在Easing类中定义了，包括二次、指数、贝塞尔等曲线以及step、bounce等方法。interpolation还支持限制输出区间outputRange。你可以通过设置extrapolate、extrapolateLeft或extrapolateRight属性来限制输出区间。默认值是extend（允许超出），不过你可以使用clamp选项来阻止输出值超过outputRange。&lt;/p&gt;
&lt;h2 id=&quot;跟踪动态值&quot;&gt;&lt;a href=&quot;#跟踪动态值&quot; class=&quot;headerlink&quot; title=&quot;跟踪动态值&quot;&gt;&lt;/a&gt;跟踪动态值&lt;/h2&gt;&lt;p&gt;动画中所设的值还可以通过跟踪别的值得到。你只要把toValue设置成另一个动态值而不是一个普通数字就行了。比如我们可以用弹跳动画来实现聊天头像的闪动，又比如通过timing设置duration:0来实现快速的跟随。他们还可以使用插值来进行组合：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Animated.spring(follower, &amp;#123;toValue: leader&amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Animated.timing(opacity, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  toValue: pan.x.interpolate(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inputRange: [0, 300],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outputRange: [1, 0],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ValueXY是一个方便的处理2D交互的办法，譬如旋转或拖拽。它是一个简单的包含了两个Animated.Value实例的包装，然后提供了一系列辅助函数，使得ValueXY在许多时候可以替代Value来使用。比如在上面的代码片段中，leader和follower可以同时为valueXY类型，这样x和y的值都会被跟踪。&lt;/p&gt;
&lt;h2 id=&quot;输入事件&quot;&gt;&lt;a href=&quot;#输入事件&quot; class=&quot;headerlink&quot; title=&quot;输入事件&quot;&gt;&lt;/a&gt;输入事件&lt;/h2&gt;&lt;p&gt;Animated.event是Animated API中与输入有关的部分，允许手势或其它事件直接绑定到动态值上。它通过一个结构化的映射语法来完成，使得复杂事件对象中的值可以被正确的解开。第一层是一个数组，允许同时映射多个值，然后数组的每一个元素是一个嵌套的对象。在下面的例子里，你可以发现scrollX被映射到了event.nativeEvent.contentOffset.x(event通常是回调函数的第一个参数)，并且pan.x和pan.y分别映射到gestureState.dx和gestureState.dy（gestureState是传递给PanResponder回调函数的第二个参数）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;onScroll=&amp;#123;Animated.event(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;#123;nativeEvent: &amp;#123;contentOffset: &amp;#123;x: scrollX&amp;#125;&amp;#125;&amp;#125;]   // scrollX = e.nativeEvent.contentOffset.x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;onPanResponderMove=&amp;#123;Animated.event([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  null,                                          // 忽略原生事件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;dx: pan.x, dy: pan.y&amp;#125;                         // 从gestureState中解析出dx和dy的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;响应当前的动画值&quot;&gt;&lt;a href=&quot;#响应当前的动画值&quot; class=&quot;headerlink&quot; title=&quot;响应当前的动画值&quot;&gt;&lt;/a&gt;响应当前的动画值&lt;/h2&gt;&lt;p&gt;你可能会注意到这里没有一个明显的方法来在动画的过程中读取当前的值——这是出于优化的角度考虑，有些值只有在原生代码运行阶段中才知道。如果你需要在JavaScript中响应当前的值，有两种可能的办法：&lt;/p&gt;
&lt;p&gt;spring.stopAnimation(callback)会停止动画并且把最终的值作为参数传递给回调函数callback——这在处理手势动画的时候非常有用。&lt;br&gt;spring.addListener(callback) 会在动画的执行过程中持续异步调用callback回调函数，提供一个最近的值作为参数。这在用于触发状态切换的时候非常有用，譬如当用户拖拽一个东西靠近的时候弹出一个新的气泡选项。不过这个状态切换可能并不会十分灵敏，因为它不像许多连续手势操作（如旋转）那样在60fps下运行。&lt;/p&gt;
&lt;h2 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react-native/tree/master/Examples/UIExplorer/AnimatedGratuitousApp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIExplorer/AnimationExample&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;LayoutAnimation&quot;&gt;&lt;a href=&quot;#LayoutAnimation&quot; class=&quot;headerlink&quot; title=&quot;LayoutAnimation&quot;&gt;&lt;/a&gt;LayoutAnimation&lt;/h1&gt;&lt;p&gt;LayoutAnimation允许你在全局范围内创建和更新动画，这些动画会在下一次渲染或布局周期运行。它常用来更新flexbox布局，因为它可以无需测量或者计算特定属性就能直接产生动画。尤其是当布局变化可能影响到父节点（譬如“查看更多”展开动画既增加父节点的尺寸又会将位于本行之下的所有行向下推动）时，如果不使用LayoutAnimation，可能就需要显式声明组件的坐标，才能使得所有受影响的组件能够同步运行动画。&lt;/p&gt;
&lt;p&gt;注意尽管LayoutAnimation非常强大且有用，但它对动画本身的控制没有Animated或者其它动画库那样方便，所以如果你使用LayoutAnimation无法实现一个效果，那可能还是要考虑其他的方案。&lt;/p&gt;
&lt;p&gt;另外，如果要在Android上使用LayoutAnimation，那么目前还需要在UIManager中启用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UIManager.setLayoutAnimationEnabledExperimental &amp;amp;&amp;amp; UIManager.setLayoutAnimationEnabledExperimental(true);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://reactnative.cn/static/docs/0.28/img/LayoutAnimationExample.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var App = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  componentWillMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 创建动画&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LayoutAnimation.spring();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getInitialState() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;#123; w: 100, h: 100 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _onPress() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 让视图的尺寸变化以动画形式展现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LayoutAnimation.spring();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.setState(&amp;#123;w: this.state.w + 15, h: this.state.h + 15&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;View style=&amp;#123;styles.container&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;View style=&amp;#123;[styles.box, &amp;#123;width: this.state.w, height: this.state.h&amp;#125;]&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;TouchableOpacity onPress=&amp;#123;this._onPress&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;View style=&amp;#123;styles.button&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;Text style=&amp;#123;styles.buttonText&amp;#125;&amp;gt;Press me!&amp;lt;/Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/TouchableOpacity&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;requestAnimationFrame&quot;&gt;&lt;a href=&quot;#requestAnimationFrame&quot; class=&quot;headerlink&quot; title=&quot;requestAnimationFrame&quot;&gt;&lt;/a&gt;requestAnimationFrame&lt;/h2&gt;&lt;p&gt;requestAnimationFrame是一个对浏览器标准API的兼容实现，你可能已经熟悉它了。它接受一个函数作为唯一的参数，并且在下一次重绘之前调用此函数。一些基于JavaScript的动画库高度依赖于这一API。通常你不必直接调用它——那些动画库会替你管理好帧的更新。&lt;/p&gt;
&lt;h2 id=&quot;关于setNativeProps&quot;&gt;&lt;a href=&quot;#关于setNativeProps&quot; class=&quot;headerlink&quot; title=&quot;关于setNativeProps&quot;&gt;&lt;/a&gt;关于setNativeProps&lt;/h2&gt;&lt;p&gt;正如直接操作文档所说，setNativeProps方法可以使我们直接修改基于原生视图的组件的属性，而不需要使用setState来重新渲染整个组件树。&lt;/p&gt;
&lt;p&gt;我们可以把这个用在Rebound样例中来更新缩放比例——如果我们要更新的组件有一个非常深的内嵌结构，并且没有使用shouldComponentUpdate来优化，那么使用setNativeProps就将大有裨益。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/ 回到上面示例的那个组件中，找到componentWillMount方法，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 然后将scrollSpring的监听函数替换为如下代码:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this._scrollSpring.addListener(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onSpringUpdate: () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!this._photo) &amp;#123; return &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var v = this._scrollSpring.getCurrentValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var newProps = &amp;#123;style: &amp;#123;transform: [&amp;#123;scaleX: v&amp;#125;, &amp;#123;scaleY: v&amp;#125;]&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this._photo.setNativeProps(newProps);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 最后，我们修改render方法，不再通过style来传入transform（避免&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 重新渲染时产生冲突）；然后给图片加上ref引用。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;render: function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;View style=&amp;#123;styles.container&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;TouchableWithoutFeedback onPressIn=&amp;#123;this._onPressIn&amp;#125; onPressOut=&amp;#123;this._onPressOut&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;Image ref=&amp;#123;component =&amp;gt; this._photo = component&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               source=&amp;#123;&amp;#123;uri: &amp;quot;https://facebook.github.io/react-native/img/ReboundExample.png&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               style=&amp;#123;&amp;#123;width: 250, height: 200&amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/TouchableWithoutFeedback&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过你没办法把setNativeProps和react-tween-state结合使用，因为更新的补间值会自动被库设置到state上——Rebound则不同，它通过onSprintUpdate函数在每一帧中给我们提供一个更新后的值。&lt;/p&gt;
&lt;p&gt;如果你发现你的动画丢帧（低于60帧每秒），可以尝试使用setNativeProps或者shouldComponentUpdate来优化它们。你还可能需要将部分计算工作放在动画完成之后进行，这时可以使用InteractionManager。你还可以使用应用内的开发者菜单中的“FPS Monitor”工具来监控应用的帧率。&lt;/p&gt;
&lt;h2 id=&quot;导航器场景切换&quot;&gt;&lt;a href=&quot;#导航器场景切换&quot; class=&quot;headerlink&quot; title=&quot;导航器场景切换&quot;&gt;&lt;/a&gt;导航器场景切换&lt;/h2&gt;&lt;p&gt;正如文档导航器对比所说，Navigator使用JavaScript实现，而NavigatoIOS则是一个对于UINavigationController提供的原生功能的包装。所以这些场景切换动画仅仅对Navigator有效。为了在Navigator中重新创建UINavigationController所提供的动画并且使之可以被自定义，React Native导出了一个NavigatorSceneConfigsAPI。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123; Dimensions &amp;#125; from &amp;apos;react-native&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var SCREEN_WIDTH = Dimensions.get(&amp;apos;window&amp;apos;).width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var BaseConfig = Navigator.SceneConfigs.FloatFromRight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var CustomLeftToRightGesture = Object.assign(&amp;#123;&amp;#125;, BaseConfig.gestures.pop, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 用户中断返回手势时，迅速弹回  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  snapVelocity: 8,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 如下设置可以使我们在屏幕的任何地方拖动它&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  edgeHitWidth: SCREEN_WIDTH,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var CustomSceneConfig = Object.assign(&amp;#123;&amp;#125;, BaseConfig, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 如下设置使过场动画看起来很快&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  springTension: 100,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  springFriction: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 使用上面我们自定义的手势&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gestures: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pop: CustomLeftToRightGesture,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动画&quot;&gt;&lt;a href=&quot;#动画&quot; class=&quot;headerlink&quot; title=&quot;动画&quot;&gt;&lt;/a&gt;动画&lt;/h1&gt;&lt;h1 id=&quot;Animated&quot;&gt;&lt;a href=&quot;#Animated&quot; class=&quot;headerlink&quot; title=&quot;Animated&quot;
    
    </summary>
    
      <category term="React Native" scheme="http://gcblog.cn/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://gcblog.cn/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native基础 (一)</title>
    <link href="http://gcblog.cn/2016/07/09/react-native2/"/>
    <id>http://gcblog.cn/2016/07/09/react-native2/</id>
    <published>2016-07-09T12:07:52.000Z</published>
    <updated>2016-07-09T12:33:47.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;样式&quot;&gt;&lt;a href=&quot;#样式&quot; class=&quot;headerlink&quot; title=&quot;样式&quot;&gt;&lt;/a&gt;样式&lt;/h1&gt;&lt;h2 id=&quot;声明样式&quot;&gt;&lt;a href=&quot;#声明样式&quot; class=&quot;headerlink&quot; title=&quot;声明样式&quot;&gt;&lt;/a&gt;声明样式&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var styles = StyleSheet.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  base: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 38,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 38,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    backgroundColor: &amp;apos;#222222&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  active: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    borderWidth: 2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    borderColor: &amp;apos;#00ff00&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所有的属性名称和值都是web里的常用样式的一部分。在布局上， React Native还实现了弹性盒模型（Flexbox）.&lt;/p&gt;
&lt;h2 id=&quot;使用样式&quot;&gt;&lt;a href=&quot;#使用样式&quot; class=&quot;headerlink&quot; title=&quot;使用样式&quot;&gt;&lt;/a&gt;使用样式&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Text style=&amp;#123;styles.base&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;View style=&amp;#123;styles.background&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;View style=&amp;#123;[styles.base, styles.background]&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其行为和Object.assign方法是一致的：为了避免多个值的冲突，最右边的元素优先级最高，而否定型的取值如false、undefined和null则会被忽略。一个通常的做法是根据某些条件选择性地添加样式。（如下面的代码，当this.state.active为false时，styles.active就会被忽略掉）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;View style=&amp;#123;[styles.base, this.state.active &amp;amp;&amp;amp; styles.active]&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;将样式作为参数传递&quot;&gt;&lt;a href=&quot;#将样式作为参数传递&quot; class=&quot;headerlink&quot; title=&quot;将样式作为参数传递&quot;&gt;&lt;/a&gt;将样式作为参数传递&lt;/h2&gt;&lt;p&gt;为了能够在调用组件的地方对其子组件样式进行自定义，你还可以将样式作为参数进行传递。可以使用View.propTypes.style和Text.propTypes.style来确保传递的参数确实是style类型的。(propTypes是对props的类型检查和限制，&lt;a href=&quot;http://facebook.github.io/react/docs/reusable-components.html#prop-validation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考文档点这里&lt;/a&gt;)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var List = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  propTypes: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    style: View.propTypes.style,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    elementStyle: View.propTypes.style,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;View style=&amp;#123;this.props.style&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;elements.map((element) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;View style=&amp;#123;[styles.element, this.props.elementStyle]&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ... 在别的文件中引用List组件 ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;List style=&amp;#123;styles.list&amp;#125; elementStyle=&amp;#123;styles.listElement&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;支持的属性&quot;&gt;&lt;a href=&quot;#支持的属性&quot; class=&quot;headerlink&quot; title=&quot;支持的属性&quot;&gt;&lt;/a&gt;支持的属性&lt;/h2&gt;&lt;p&gt;你可以在下面这些链接中查看最新支持的CSS属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://reactnative.cn/docs/0.28/view.html#style&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;View的属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://reactnative.cn/docs/0.28/image.html#style&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Image的属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://reactnative.cn/docs/0.28/text.html#style&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Text的属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://reactnative.cn/docs/0.28/flexbox.html#content&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flex的属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://reactnative.cn/docs/0.28/transforms.html#content&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transform的属性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;图片&quot;&gt;&lt;a href=&quot;#图片&quot; class=&quot;headerlink&quot; title=&quot;图片&quot;&gt;&lt;/a&gt;图片&lt;/h1&gt;&lt;h2 id=&quot;静态图片资源&quot;&gt;&lt;a href=&quot;#静态图片资源&quot; class=&quot;headerlink&quot; title=&quot;静态图片资源&quot;&gt;&lt;/a&gt;静态图片资源&lt;/h2&gt;&lt;p&gt;从0.14版本开始，React Native提供了一个统一的方式来管理iOS和Android应用中的图片。要往App中添加一个静态图片，只需把图片文件放在代码文件夹中某处，然后像下面这样去引用它：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Image source=&amp;#123;require(&amp;apos;./my-icon.png&amp;apos;)&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;如果你有my-icon.ios.png和my-icon.android.png，Packager就会根据平台而选择不同的文件。&lt;/li&gt;
&lt;li&gt;你还可以使用@2x，@3x这样的文件名后缀，来为不同的屏幕精度提供图片。比如下面这样的代码结构：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── button.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── check@2x.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── check@3x.png&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Packager会打包所有的图片并且依据屏幕精度提供对应的资源。譬如说，iPhone 5s会使用check@2x.png，而Nexus 5上则会使用check@3x.png。如果没有图片恰好满足屏幕分辨率，则会自动选中最接近的一个图片。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：如果你添加图片的时候packager正在运行，则你需要重启packager以便能正确引入新添加的图片。&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;这样会带来如下的一些好处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS和Android一致的文件系统。&lt;/li&gt;
&lt;li&gt;图片和JS代码处在相同的文件夹，这样组件就可以包含自己所用的图片而不用单独去设置。&lt;/li&gt;
&lt;li&gt;不需要全局命名。你不用再担心图片名字的冲突问题了。&lt;/li&gt;
&lt;li&gt;只有实际被用到（即被require）的图片才会被打包到你的app。&lt;/li&gt;
&lt;li&gt;现在在开发期间，增加和修改图片不需要重新编译了，只要和修改js代码一样刷新你的模拟器就可以了。&lt;/li&gt;
&lt;li&gt;与访问网络图片相比，Packager可以得知图片大小了，不需要在代码里再声明一遍尺寸。&lt;/li&gt;
&lt;li&gt;现在通过npm来分发组件或库可以包含图片了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：为了使新的图片资源机制正常工作，require中的图片名字必须是一个静态字符串。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 正确&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Image source=&amp;#123;require(&amp;apos;./my-icon.png&amp;apos;)&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var icon = this.props.active ? &amp;apos;my-icon-active&amp;apos; : &amp;apos;my-icon-inactive&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Image source=&amp;#123;require(&amp;apos;./&amp;apos; + icon + &amp;apos;.png&amp;apos;)&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 正确&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var icon = this.props.active ? require(&amp;apos;./my-icon-active.png&amp;apos;) : require(&amp;apos;./my-icon-inactive.png&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Image source=&amp;#123;icon&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用混合App的图片资源&quot;&gt;&lt;a href=&quot;#使用混合App的图片资源&quot; class=&quot;headerlink&quot; title=&quot;使用混合App的图片资源&quot;&gt;&lt;/a&gt;使用混合App的图片资源&lt;/h2&gt;&lt;p&gt;如果你在编写一个混合App（一部分UI使用React Native，而另一部分使用平台原生代码），也可以使用已经打包到App中的图片资源（通过Xcode的asset类目或者Android的drawable文件夹打包）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Image source=&amp;#123;&amp;#123;uri: &amp;apos;app_icon&amp;apos;&amp;#125;&amp;#125; style=&amp;#123;&amp;#123;width: 40, height: 40&amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：这一做法并没有任何安全检查。你需要自己确保图片在应用中确实存在，而且还需要指定尺寸。&lt;/p&gt;
&lt;h2 id=&quot;网络图片&quot;&gt;&lt;a href=&quot;#网络图片&quot; class=&quot;headerlink&quot; title=&quot;网络图片&quot;&gt;&lt;/a&gt;网络图片&lt;/h2&gt;&lt;p&gt;很多要在App中显示的图片并不能在编译的时候获得，又或者有时候需要动态载入来减少打包后的二进制文件的大小。这些时候，与静态资源不同的是，你需要手动指定图片的尺寸。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 正确&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Image source=&amp;#123;&amp;#123;uri: &amp;apos;https://facebook.github.io/react/img/logo_og.png&amp;apos;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       style=&amp;#123;&amp;#123;width: 400, height: 400&amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Image source=&amp;#123;&amp;#123;uri: &amp;apos;https://facebook.github.io/react/img/logo_og.png&amp;apos;&amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;图片自动适配尺寸&quot;&gt;&lt;a href=&quot;#图片自动适配尺寸&quot; class=&quot;headerlink&quot; title=&quot;图片自动适配尺寸&quot;&gt;&lt;/a&gt;图片自动适配尺寸&lt;/h2&gt;&lt;p&gt;在React Native中从已经打包好的应用资源文件中读取图片（使用require(‘image!x’)语法）无需指定尺寸，因为它们的尺寸在加载时就可以立刻知道。&lt;/p&gt;
&lt;p&gt;比如这样一个引用require(‘image!logo’)的实际输出结果可能是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;__packager_asset&amp;quot;:true,&amp;quot;isStatic&amp;quot;:true,&amp;quot;path&amp;quot;:&amp;quot;/Users/react/HelloWorld/iOS/Images.xcassets/react.imageset/logo.png&amp;quot;,&amp;quot;uri&amp;quot;:&amp;quot;logo&amp;quot;,&amp;quot;width&amp;quot;:591,&amp;quot;height&amp;quot;:573&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;资源属性是一个对象（object）&quot;&gt;&lt;a href=&quot;#资源属性是一个对象（object）&quot; class=&quot;headerlink&quot; title=&quot;资源属性是一个对象（object）&quot;&gt;&lt;/a&gt;资源属性是一个对象（object）&lt;/h2&gt;&lt;p&gt;在React Native中，另一个值得一提的变动是我们把src属性改为了source属性，而且并不接受字符串，正确的值是一个带有uri属性的对象。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Image source=&amp;#123;&amp;#123;uri: &amp;apos;something.jpg&amp;apos;&amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;通过嵌套来实现背景图片&quot;&gt;&lt;a href=&quot;#通过嵌套来实现背景图片&quot; class=&quot;headerlink&quot; title=&quot;通过嵌套来实现背景图片&quot;&gt;&lt;/a&gt;通过嵌套来实现背景图片&lt;/h2&gt;&lt;p&gt;开发者们常面对的一种需求就是类似web中的背景图（background-image）。要实现这一用例，只需简单地创建一个&lt;image&gt;组件，然后把需要背景图的子组件嵌入其中即可。&lt;/image&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Image source=&amp;#123;...&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Text&amp;gt;Inside&amp;lt;/Text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/Image&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;在主线程外解码图片&quot;&gt;&lt;a href=&quot;#在主线程外解码图片&quot; class=&quot;headerlink&quot; title=&quot;在主线程外解码图片&quot;&gt;&lt;/a&gt;在主线程外解码图片&lt;/h2&gt;&lt;p&gt;图片解码有可能会需要超过一帧的时间。在web上这是页面掉帧的一大因素，因为解码是在主线程中完成的。然而在React Native中，图片解码则是在另一线程中完成的。在实际开发中，一般对图片还没下载完成时的场景都做了处理（添加loading等），而图片解码时显示的占位符只占用几帧时间，并不需要你改动代码去额外处理。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;样式&quot;&gt;&lt;a href=&quot;#样式&quot; class=&quot;headerlink&quot; title=&quot;样式&quot;&gt;&lt;/a&gt;样式&lt;/h1&gt;&lt;h2 id=&quot;声明样式&quot;&gt;&lt;a href=&quot;#声明样式&quot; class=&quot;headerlink&quot; title=&quot;声明样式&quot;&gt;&lt;/a&gt;声明样式&lt;/h
    
    </summary>
    
      <category term="React Native" scheme="http://gcblog.cn/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://gcblog.cn/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native环境搭建</title>
    <link href="http://gcblog.cn/2016/06/27/react-native1/"/>
    <id>http://gcblog.cn/2016/06/27/react-native1/</id>
    <published>2016-06-27T13:45:36.000Z</published>
    <updated>2016-06-27T14:57:43.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;官网地址 : &lt;a href=&quot;http://reactnative.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactnative.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;如果已安装请无视&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;Homebrew&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;译注：在Max OS X 10.11（El Capitan)版本中，homebrew在安装软件时可能会碰到/usr/local目录不可写的权限问题。可以使用下面的命令修复：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo chown -R `whoami` /usr/local&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Node&quot;&gt;&lt;a href=&quot;#Node&quot; class=&quot;headerlink&quot; title=&quot;Node&quot;&gt;&lt;/a&gt;Node&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;react-native-cli&quot;&gt;&lt;a href=&quot;#react-native-cli&quot; class=&quot;headerlink&quot; title=&quot;react-native-cli&quot;&gt;&lt;/a&gt;react-native-cli&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g react-native-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;国内用户要切换npm源, 原因你自己感受下就懂了. 切换办法如下: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;安装nrm&quot;&gt;&lt;a href=&quot;#安装nrm&quot; class=&quot;headerlink&quot; title=&quot;安装nrm&quot;&gt;&lt;/a&gt;安装nrm&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;nrm是一个npm源管理器, 允许你快速地在如下npm源间切换：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cnpmjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cnpm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://strongloop.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;strongloop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npmjs.eu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;european&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npmjs.org.au/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;australia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nodejitsu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejitsu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;taobao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;安装命令&quot;&gt;&lt;a href=&quot;#安装命令&quot; class=&quot;headerlink&quot; title=&quot;安装命令:&quot;&gt;&lt;/a&gt;安装命令:&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g nrm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;列出可选的源&quot;&gt;&lt;a href=&quot;#列出可选的源&quot; class=&quot;headerlink&quot; title=&quot;列出可选的源:&quot;&gt;&lt;/a&gt;列出可选的源:&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nrm ls                                                                                                                                    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* npm ---- https://registry.npmjs.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cnpm --- http://r.cnpmjs.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  taobao - http://registry.npm.taobao.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  eu ----- http://registry.npmjs.eu/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  au ----- http://registry.npmjs.org.au/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sl ----- http://npm.strongloop.com/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  nj ----- https://registry.nodejitsu.com/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;切换&quot;&gt;&lt;a href=&quot;#切换&quot; class=&quot;headerlink&quot; title=&quot;切换:&quot;&gt;&lt;/a&gt;切换:&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nrm use taobao                                                                                                                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Registry has been set to: http://registry.npm.taobao.org/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;增加源&quot;&gt;&lt;a href=&quot;#增加源&quot; class=&quot;headerlink&quot; title=&quot;增加源:&quot;&gt;&lt;/a&gt;增加源:&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nrm add  &amp;lt;registry&amp;gt; &amp;lt;url&amp;gt; [home]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;删除源&quot;&gt;&lt;a href=&quot;#删除源&quot; class=&quot;headerlink&quot; title=&quot;删除源:&quot;&gt;&lt;/a&gt;删除源:&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nrm del &amp;lt;registry&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;测试速度&quot;&gt;&lt;a href=&quot;#测试速度&quot; class=&quot;headerlink&quot; title=&quot;测试速度:&quot;&gt;&lt;/a&gt;测试速度:&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nrm test npm                                                                                                                               &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  npm ---- 1328ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;测试所有源的响应时间：&quot;&gt;&lt;a href=&quot;#测试所有源的响应时间：&quot; class=&quot;headerlink&quot; title=&quot;测试所有源的响应时间：&quot;&gt;&lt;/a&gt;测试所有源的响应时间：&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nrm test                                                                                                                                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  npm ---- 891ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cnpm --- 1213ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* taobao - 460ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  eu ----- 3859ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  au ----- 1073ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sl ----- 4150ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  nj ----- 8008ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Xcode&quot;&gt;&lt;a href=&quot;#Xcode&quot; class=&quot;headerlink&quot; title=&quot;Xcode&quot;&gt;&lt;/a&gt;Xcode&lt;/h4&gt;&lt;h4 id=&quot;Android-Studio&quot;&gt;&lt;a href=&quot;#Android-Studio&quot; class=&quot;headerlink&quot; title=&quot;Android Studio&quot;&gt;&lt;/a&gt;Android Studio&lt;/h4&gt;&lt;h4 id=&quot;JDK-1-8&quot;&gt;&lt;a href=&quot;#JDK-1-8&quot; class=&quot;headerlink&quot; title=&quot;JDK 1.8&quot;&gt;&lt;/a&gt;JDK 1.8&lt;/h4&gt;&lt;hr&gt;
&lt;h3 id=&quot;运行DEMO&quot;&gt;&lt;a href=&quot;#运行DEMO&quot; class=&quot;headerlink&quot; title=&quot;运行DEMO&quot;&gt;&lt;/a&gt;运行DEMO&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Demo Github地址: &lt;a href=&quot;https://github.com/facebook/react-native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/facebook/react-native&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;下载项目&quot;&gt;&lt;a href=&quot;#下载项目&quot; class=&quot;headerlink&quot; title=&quot;下载项目&quot;&gt;&lt;/a&gt;下载项目&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/facebook/react-native.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd react-native &amp;amp;&amp;amp; npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;配置Android环境并运行Demo&quot;&gt;&lt;a href=&quot;#配置Android环境并运行Demo&quot; class=&quot;headerlink&quot; title=&quot;配置Android环境并运行Demo&quot;&gt;&lt;/a&gt;配置Android环境并运行Demo&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;将下载的Examples用Android Studio打开. (如果本地没有gradle会在导入过程中下载, 需要很长时间, 不要着急, 耐心等待)&lt;/li&gt;
&lt;li&gt;修改项目local.properties, 加入以下路径.&lt;ul&gt;
&lt;li&gt;sdk.dir=$Android SDK路径 &lt;/li&gt;
&lt;li&gt;ndk.dir=$Android NDK路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;打开Terminal&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动本地资源服务&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//切记使用sudo来执行, 否则会因权限导致启动错误 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo ./packager/packager.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译运行项目&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./gradlew :Examples:Movies:android:app:installDebug &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//此命令为编译项目, 并且安装debug版本apk到终端(需要连接手机或模拟器)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//也可以自行build项目, 然后运行到终端&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;配置iOS环境并运行Demo&quot;&gt;&lt;a href=&quot;#配置iOS环境并运行Demo&quot; class=&quot;headerlink&quot; title=&quot;配置iOS环境并运行Demo&quot;&gt;&lt;/a&gt;配置iOS环境并运行Demo&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动本地资源服务&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//切记使用sudo来执行, 否则会因权限导致启动错误 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo ./packager/packager.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开Examples/*/*.xcodeproj文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Build -&amp;gt; Run in Xcode&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;ndk版本不要高于r10b&lt;/li&gt;
&lt;li&gt;脚本执行需要提供权限&lt;/li&gt;
&lt;li&gt;Node等支持工具需要最新版本&lt;/li&gt;
&lt;li&gt;build过程需要下载boost_1_57_0.zip(100+MB), 最好直接去下载完了扔到ReactAndroid/build/downloads下, 如果在线下载的话最好开墙. 否则你懂得.&lt;/li&gt;
&lt;li&gt;过程中提示缺包的话, npm info查下, 然后install.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前Demo的运行就这些坑, 没太多难度的.&lt;br&gt;附个运行Demo截图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xs2xr.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-06-27%20%E4%B8%8B%E5%8D%8810.48.05.png&quot; width=&quot;1280&quot; height=&quot;720&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;官网地址 : &lt;a href=&quot;http://reactnative.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://reactnative.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;
    
    </summary>
    
      <category term="React Native" scheme="http://gcblog.cn/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://gcblog.cn/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Android 4.0蓝牙介绍</title>
    <link href="http://gcblog.cn/2016/03/20/bluetooth/"/>
    <id>http://gcblog.cn/2016/03/20/bluetooth/</id>
    <published>2016-03-20T05:26:35.000Z</published>
    <updated>2016-03-20T14:39:49.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;最近一直在倒腾各种版本的蓝牙功能适配.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;今天先介绍下蓝牙4.0连接配对流程中各种对象的作用.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;顺带梳理下Ble从连接到写入到接收通知的流程.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;目前市场上的穿戴设备的蓝牙4.0读写基本都是以下实现过程.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;版本及权限&quot;&gt;&lt;a href=&quot;#版本及权限&quot; class=&quot;headerlink&quot; title=&quot;版本及权限&quot;&gt;&lt;/a&gt;版本及权限&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;版本支持: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android OS API &amp;gt;= 18(4.3)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;权限支持: &lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.BLUETOOTH&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.BLUETOOTH_ADMIN&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-feature android:name=&lt;span class=&quot;string&quot;&gt;&quot;android.hardware.bluetooth_le&quot;&lt;/span&gt; android:required=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果 android.hardware.bluetooth_le设置为false,可以安装在不支持的设备上使用，判断是否支持蓝牙4.0用以下代码就可以了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;流程图&quot;&gt;&lt;a href=&quot;#流程图&quot; class=&quot;headerlink&quot; title=&quot;流程图&quot;&gt;&lt;/a&gt;流程图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7xs2xr.com1.z0.glb.clouddn.com/bluetooth4.0&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;BluetoothGatt&quot;&gt;&lt;a href=&quot;#BluetoothGatt&quot; class=&quot;headerlink&quot; title=&quot;BluetoothGatt&quot;&gt;&lt;/a&gt;BluetoothGatt&lt;/h4&gt;&lt;p&gt;继承BluetoothProfile，通过BluetoothGatt可以连接设备（connect）,发现服务（discoverServices），并把相应地属性返回到BluetoothGattCallback &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, BluetoothDevice device)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//开启连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mBluetoothGatt = device.connectGatt(context, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, mBTGattCallback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;BluetoothGattCharacteristic&quot;&gt;&lt;a href=&quot;#BluetoothGattCharacteristic&quot; class=&quot;headerlink&quot; title=&quot;BluetoothGattCharacteristic&quot;&gt;&lt;/a&gt;BluetoothGattCharacteristic&lt;/h4&gt;&lt;p&gt;相当于一个数据类型，它包括一个value和0~n个value的描述（BluetoothGattDescriptor）&lt;/p&gt;
&lt;h4 id=&quot;BluetoothGattDescriptor&quot;&gt;&lt;a href=&quot;#BluetoothGattDescriptor&quot; class=&quot;headerlink&quot; title=&quot;BluetoothGattDescriptor&quot;&gt;&lt;/a&gt;BluetoothGattDescriptor&lt;/h4&gt;&lt;p&gt;描述符，对Characteristic的描述，包括范围、计量单位等&lt;/p&gt;
&lt;h4 id=&quot;BluetoothGattService&quot;&gt;&lt;a href=&quot;#BluetoothGattService&quot; class=&quot;headerlink&quot; title=&quot;BluetoothGattService&quot;&gt;&lt;/a&gt;BluetoothGattService&lt;/h4&gt;&lt;p&gt;服务，Characteristic的集合。&lt;/p&gt;
&lt;h4 id=&quot;BluetoothGattCallback&quot;&gt;&lt;a href=&quot;#BluetoothGattCallback&quot; class=&quot;headerlink&quot; title=&quot;BluetoothGattCallback&quot;&gt;&lt;/a&gt;BluetoothGattCallback&lt;/h4&gt;&lt;p&gt;蓝牙设备操作结果返回。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; BluetoothGattCallback mBTGattCallback = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BluetoothGattCallback() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//连接结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onConnectionStateChange&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BluetoothGatt gatt, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; status, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; newState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onConnectionStateChange(gatt, status, newState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (newState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BluetoothProfile.STATE_CONNECTED:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				gatt.discoverServices();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BluetoothProfile.STATE_DISCONNECTED:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//发现服务结果(连接完成后调用)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onServicesDiscovered&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BluetoothGatt gatt, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; status)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onServicesDiscovered(gatt, status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCharacteristicRead&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; status)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCharacteristicRead(gatt, characteristic, status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//写入指令结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCharacteristicWrite&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; status)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCharacteristicWrite(gatt, characteristic, status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//蓝牙通知数据结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCharacteristicChanged&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCharacteristicChanged(gatt, characteristic);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;连接调用流程:&lt;/p&gt;
&lt;p&gt;onConnectionStateChange -&amp;gt; onServicesDiscovered()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此方法会返回指定BluetoothDevice的所有BluetoothGattService对象,通过遍历BluetoothGattService来获取所有BluetoothGattCharacteristic,然后匹配对应的UUID,实例Service,Write,Notify等Characteristic.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onServicesDiscovered&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BluetoothGatt gatt, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; status)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onServicesDiscovered(gatt, status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (status == BluetoothGatt.GATT_SUCCESS) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;BluetoothGattService&amp;gt; services = gatt.getServices();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (BluetoothGattService service : services) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            List&amp;lt;BluetoothGattCharacteristic&amp;gt; _gattCharacteristics = service.getCharacteristics();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mGattCharacteristics.add(_gattCharacteristics);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; mGattCharacteristics.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            List&amp;lt;BluetoothGattCharacteristic&amp;gt; _char_list = mGattCharacteristics.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; _char_list.size(); j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                BluetoothGattCharacteristic _char = _char_list.get(j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; ==========&amp;gt; bluetooth uuid: &quot;&lt;/span&gt; + _char.getUuid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (UUID_WRITE.equals(_char.getUuid())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mWriteCharacteristic = _char;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; ==========&amp;gt; write uuid: &quot;&lt;/span&gt; + _char.getUuid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (UUID_NOTIFY.equals(_char.getUuid())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mNotifyCharacteristic = _char;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; ==========&amp;gt; notify uuid: &quot;&lt;/span&gt; + _char.getUuid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mNotifyCharacteristic != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (registerNotifyChar(gatt, mNotifyCharacteristic)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;//注册通知成功,等待写入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            disConnect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;//未找到Notify Characteristic.连接失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;如需开启设备蓝牙通知回传数据,需要往获取的Notify Characteristic的0x2902 BluetoothGattDescriptor中写入BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE来开启设备通知服务.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;registerNotifyChar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; set_notify = gatt.setCharacteristicNotification(characteristic, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           BluetoothGattDescriptor descriptor = characteristic.getDescriptor(UUID.fromString(&lt;span class=&quot;string&quot;&gt;&quot;00002902-0000-1000-8000-00805f9b34fb&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; enable_descriptor = descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; write_descriptor = gatt.writeDescriptor(descriptor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; ==========&amp;gt; registerNotifyChar: &quot;&lt;/span&gt; + set_notify + &lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt; + enable_descriptor + &lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt; + write_descriptor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (write_descriptor &amp;amp;&amp;amp; enable_descriptor &amp;amp;&amp;amp; set_notify) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写数据调用流程&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//连接成功后,开始写入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mBluetoothGatt != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mWriteCharacteristic.setValue(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mBluetoothGatt.writeCharacteristic(mWriteCharacteristic);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写入数据会触发如下方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCharacteristicWrite&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; status)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCharacteristicWrite(gatt, characteristic, status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设备接收数据成功后,会已通知形式下发数据,回传如下方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCharacteristicChanged&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCharacteristicChanged(gatt, characteristic);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//characteristic.getValue() //蓝牙回传数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;BluetoothManager&quot;&gt;&lt;a href=&quot;#BluetoothManager&quot; class=&quot;headerlink&quot; title=&quot;BluetoothManager&quot;&gt;&lt;/a&gt;BluetoothManager&lt;/h4&gt;&lt;p&gt;通过BluetoothManager来获取BluetoothAdapter&lt;/p&gt;
&lt;h4 id=&quot;BluetoothAdapter&quot;&gt;&lt;a href=&quot;#BluetoothAdapter&quot; class=&quot;headerlink&quot; title=&quot;BluetoothAdapter&quot;&gt;&lt;/a&gt;BluetoothAdapter&lt;/h4&gt;&lt;p&gt;系统蓝牙适配器. 通过此对象可以开启,关闭系统蓝牙;可以开启附近蓝牙设备扫描&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Build.VERSION.SDK_INT &amp;lt; &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mBluetoothAdapter.startLeScan(mLeScanCallback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mCbtScanCallback == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mCbtScanCallback = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CBTScanCallback();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mLEScanner.startScan(mLeFilters, mLeSettings, mCbtScanCallback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;LeScanCallback&quot;&gt;&lt;a href=&quot;#LeScanCallback&quot; class=&quot;headerlink&quot; title=&quot;LeScanCallback&quot;&gt;&lt;/a&gt;LeScanCallback&lt;/h4&gt;&lt;p&gt;OS API &amp;lt; 21 蓝牙扫描结果回调类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLeScan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BluetoothDevice device, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rssi, &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] scanRecord)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//device: 扫描设备结果对象, rssi: 信号强弱值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;ScanCallback&quot;&gt;&lt;a href=&quot;#ScanCallback&quot; class=&quot;headerlink&quot; title=&quot;ScanCallback&quot;&gt;&lt;/a&gt;ScanCallback&lt;/h4&gt;&lt;p&gt;OS API &amp;gt;= 21 蓝牙扫描结果回调类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onScanResult&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; callbackType, ScanResult result)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onScanResult(callbackType, result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//result.getDevice(): 扫描设备对象,  (short)result.getRssi(): 信号强弱值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;ScanSettings&quot;&gt;&lt;a href=&quot;#ScanSettings&quot; class=&quot;headerlink&quot; title=&quot;ScanSettings&quot;&gt;&lt;/a&gt;ScanSettings&lt;/h4&gt;&lt;p&gt;OS API &amp;gt;= 21 蓝牙扫描设置类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ScanSettings mLeSettings = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//SCAN_MODE_LOW_POWER&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//SCAN_MODE_BALANCED&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//SCAN_MODE_LOW_LATENCY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//SCAN_MODE_OPPORTUNISTIC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//具体各自解释见api文档&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;BluetoothProfile&quot;&gt;&lt;a href=&quot;#BluetoothProfile&quot; class=&quot;headerlink&quot; title=&quot;BluetoothProfile&quot;&gt;&lt;/a&gt;BluetoothProfile&lt;/h4&gt;&lt;p&gt;一个通用的规范，按照这个规范来收发数据。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;最近一直在倒腾各种版本的蓝牙功能适配.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;今天先介绍下蓝牙4.0连接配对流程中各种对象的作用.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;顺带梳理下Ble从连接到
    
    </summary>
    
    
      <category term="Bluetooth" scheme="http://gcblog.cn/tags/Bluetooth/"/>
    
  </entry>
  
  <entry>
    <title>RxJava调度器Scheduler</title>
    <link href="http://gcblog.cn/2016/01/07/RxJava%E8%B0%83%E5%BA%A6%E5%99%A8Scheduler/"/>
    <id>http://gcblog.cn/2016/01/07/RxJava调度器Scheduler/</id>
    <published>2016-01-07T13:04:00.000Z</published>
    <updated>2016-03-06T05:50:10.000Z</updated>
    
    <content type="html">&lt;p&gt;如果你想给Observable操作符链添加多线程功能，你可以指定操作符（或者特定的Observable）在特定的调度器(Scheduler)上执行。&lt;/p&gt;
&lt;p&gt;某些ReactiveX的Observable操作符有一些变体，它们可以接受一个Scheduler参数。这个参数指定操作符将它们的部分或全部任务放在一个特定的调度器上执行。&lt;/p&gt;
&lt;p&gt;使用ObserveOn和SubscribeOn操作符，你可以让Observable在一个特定的调度器上执行，ObserveOn指示一个 Observable在一个特定的调度器上调用观察者的onNext, onError和onCompleted方法，SubscribeOn更进一步，它指示Observable将全部的处理过程（包括发射数据和通知）放在特定的调度器上执行。&lt;/p&gt;
&lt;h5 id=&quot;调度器的种类&quot;&gt;&lt;a href=&quot;#调度器的种类&quot; class=&quot;headerlink&quot; title=&quot;调度器的种类&quot;&gt;&lt;/a&gt;调度器的种类&lt;/h5&gt;&lt;p&gt;下表展示了RxJava中可用的调度器种类：&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;thead&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;th&gt;调度器类型&lt;/th&gt;&lt;br&gt;&lt;th&gt;效果&lt;/th&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;/thead&gt;&lt;br&gt;&lt;tbody&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;Schedulers.computation( )&lt;/td&gt;&lt;br&gt;&lt;td&gt;用于计算任务，如事件循环或和回调处理，不要用于IO操作(IO操作请使用Schedulers.io())；默认线程数等于处理器的数量。它也是许多RxJava方法的默认调度器：buffer(),debounce(),delay(),interval(),sample(),skip()。&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;Schedulers.from(executor)&lt;/td&gt;&lt;br&gt;&lt;td&gt;使用指定的Executor作为调度器&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;Schedulers.immediate( )&lt;/td&gt;&lt;br&gt;&lt;td&gt;这个调度器允许你立即在当前线程执行你指定的工作。它是timeout(),timeInterval(),以及timestamp()方法默认的调度器。&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;Schedulers.io( )&lt;/td&gt;&lt;br&gt;&lt;td&gt;用于IO密集型任务，如异步阻塞IO操作，这个调度器的线程池会根据需要增长；对于普通的计算任务，请使用Schedulers.computation()；Schedulers.io( )默认是一个CachedThreadScheduler，很像一个有线程缓存的新线程调度器&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;Schedulers.newThread( )&lt;/td&gt;&lt;br&gt;&lt;td&gt;为每个任务创建一个新线程&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;Schedulers.trampoline( )&lt;/td&gt;&lt;br&gt;&lt;td&gt;当我们想在当前线程执行一个任务时，并不是立即，我们可以用.trampoline()将它入队。这个调度器将会处理它的队列并且按序运行队列中每一个任务。它是repeat()和retry()方法默认的调度器。&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;br&gt;&lt;/table&gt;

&lt;h5 id=&quot;默认调度器&quot;&gt;&lt;a href=&quot;#默认调度器&quot; class=&quot;headerlink&quot; title=&quot;默认调度器&quot;&gt;&lt;/a&gt;默认调度器&lt;/h5&gt;&lt;p&gt;在RxJava中，某些Observable操作符的变体允许你设置用于操作执行的调度器，其它的则不在任何特定的调度器上执行，或者在一个指定的默认调度器上执行。下面的表格个列出了一些操作符的默认调度器：&lt;/p&gt;
&lt;table&gt;&lt;br&gt;&lt;thead&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;th&gt;操作符&lt;/th&gt;&lt;br&gt;&lt;th&gt;调度器&lt;/th&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;/thead&gt;&lt;br&gt;&lt;tbody&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;buffer(timespan)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;buffer(timespan, count)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;buffer(timespan, timeshift)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;debounce(timeout, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;delay(delay, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;delaySubscription(delay, unit)    computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;interval&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;repeat&lt;/td&gt;&lt;br&gt;&lt;td&gt;trampoline&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;replay(time, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;replay(buffersize, time, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;replay(selector, time, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;replay(selector, buffersize, time, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;retry&lt;/td&gt;&lt;br&gt;&lt;td&gt;trampoline&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;sample(period, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;skip(time, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;skipLast(time, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;take(time, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;takeLast(time, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;takeLast(count, time, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;takeLastBuffer(time, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;takeLastBuffer(count, time, unit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;throttleFirst&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;throttleLast&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;throttleWithTimeout&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;timeInterval&lt;/td&gt;&lt;br&gt;&lt;td&gt;immediate&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;timeout(timeoutSelector)&lt;/td&gt;&lt;br&gt;&lt;td&gt;immediate&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;timeout(firstTimeoutSelector, timeoutSelector)&lt;/td&gt;&lt;br&gt;&lt;td&gt;immediate&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;timeout(timeoutSelector, other)&lt;/td&gt;&lt;br&gt;&lt;td&gt;immediate&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;timeout(timeout, timeUnit)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;timeout(firstTimeoutSelector, timeoutSelector, other)&lt;/td&gt;&lt;br&gt;&lt;td&gt;immediate&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;timeout(timeout, timeUnit, other)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;timer&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;timestamp&lt;/td&gt;&lt;br&gt;&lt;td&gt;immediate&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;window(timespan)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;window(timespan, count)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;br&gt;&lt;td&gt;window(timespan, timeshift)&lt;/td&gt;&lt;br&gt;&lt;td&gt;computation&lt;/td&gt;&lt;br&gt;&lt;/tr&gt;&lt;br&gt;&lt;/tbody&gt;&lt;br&gt;&lt;/table&gt;

&lt;h5 id=&quot;使用调度器&quot;&gt;&lt;a href=&quot;#使用调度器&quot; class=&quot;headerlink&quot; title=&quot;使用调度器&quot;&gt;&lt;/a&gt;使用调度器&lt;/h5&gt;&lt;p&gt;除了将这些调度器传递给RxJava的Observable操作符，你也可以用它们调度你自己的任务。下面的示例展示了Scheduler.Worker的用法：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;worker = Schedulers.newThread().createWorker();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worker.schedule(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action0() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        yourWork();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// some time later…&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worker.unsubscribe();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h6 id=&quot;递归调度器&quot;&gt;&lt;a href=&quot;#递归调度器&quot; class=&quot;headerlink&quot; title=&quot;递归调度器&quot;&gt;&lt;/a&gt;递归调度器&lt;/h6&gt;&lt;p&gt;要调度递归的方法调用，你可以使用schedule，然后再用schedule(this)，示例：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;worker = Schedulers.newThread().createWorker();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worker.schedule(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action0() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        yourWork();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// recurse until unsubscribed (schedule will do nothing if unsubscribed)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        worker.schedule(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// some time later…&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worker.unsubscribe();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h6 id=&quot;检查或设置取消订阅状态&quot;&gt;&lt;a href=&quot;#检查或设置取消订阅状态&quot; class=&quot;headerlink&quot; title=&quot;检查或设置取消订阅状态&quot;&gt;&lt;/a&gt;检查或设置取消订阅状态&lt;/h6&gt;&lt;p&gt;Worker类的对象实现了Subscription接口，使用它的isUnsubscribed和unsubscribe方法，所以你可以在订阅取消时停止任务，或者从正在调度的任务内部取消订阅，示例：&lt;/p&gt;
&lt;figure class=&quot;highlight sml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Worker&lt;/span&gt; worker = &lt;span class=&quot;type&quot;&gt;Schedulers&lt;/span&gt;.newThread&lt;span class=&quot;literal&quot;&gt;()&lt;/span&gt;.createWorker&lt;span class=&quot;literal&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Subscription&lt;/span&gt; mySubscription = worker.schedule(new &lt;span class=&quot;type&quot;&gt;Action0&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @&lt;span class=&quot;type&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void call&lt;span class=&quot;literal&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!worker.isUnsubscribed&lt;span class=&quot;literal&quot;&gt;()&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            status = yourWork&lt;span class=&quot;literal&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;QUIT&lt;/span&gt; == status) &amp;#123; worker.unsubscribe&lt;span class=&quot;literal&quot;&gt;()&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Worker同时是Subscription，因此你可以（通常也应该）调用它的unsubscribe方法通知可以挂起任务和释放资源了。&lt;/p&gt;
&lt;h6 id=&quot;延时和周期调度器&quot;&gt;&lt;a href=&quot;#延时和周期调度器&quot; class=&quot;headerlink&quot; title=&quot;延时和周期调度器&quot;&gt;&lt;/a&gt;延时和周期调度器&lt;/h6&gt;&lt;p&gt;你可以使用schedule(action,delayTime,timeUnit)在指定的调度器上延时执行你的任务，下面例子中的任务将在500毫秒之后开始执行：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;someScheduler&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.schedule&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;someAction&lt;/span&gt;, 500, &lt;span class=&quot;tag&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.MILLISECONDS&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用另一个版本的schedule，schedulePeriodically(action,initialDelay,period,timeUnit)方法让你可以安排一个定期执行的任务，下面例子的任务将在500毫秒之后执行，然后每250毫秒执行一次：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;someScheduler.schedulePeriodically(someAction, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;, TimeUnit.MILLISECONDS);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h6 id=&quot;测试调度器&quot;&gt;&lt;a href=&quot;#测试调度器&quot; class=&quot;headerlink&quot; title=&quot;测试调度器&quot;&gt;&lt;/a&gt;测试调度器&lt;/h6&gt;&lt;p&gt;TestScheduler让你可以对调度器的时钟表现进行手动微调。这对依赖精确时间安排的任务的测试很有用处。这个调度器有三个额外的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;advanceTimeTo(time,unit) 向前波动调度器的时钟到一个指定的时间点&lt;/li&gt;
&lt;li&gt;advanceTimeBy(time,unit) 将调度器的时钟向前拨动一个指定的时间段&lt;/li&gt;
&lt;li&gt;triggerActions( ) 开始执行任何计划中的但是未启动的任务，如果它们的计划时间等于或者早于调度器时钟的当前时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;SubscribeOn-and-ObserveOn&quot;&gt;&lt;a href=&quot;#SubscribeOn-and-ObserveOn&quot; class=&quot;headerlink&quot; title=&quot;SubscribeOn and ObserveOn&quot;&gt;&lt;/a&gt;SubscribeOn and ObserveOn&lt;/h5&gt;&lt;p&gt;RxJava提供了subscribeOn()方法来用于每个Observable对象。subscribeOn()方法用Scheduler来作为参数并在这个Scheduler上执行Observable调用。&lt;br&gt;observeOn()方法将会在指定的调度器上返回结果：如例子中的Android UI线程。&lt;br&gt;onBackpressureBuffer()方法将告诉Observable发射的数据如果比观察者消费的数据要更快的话，它必须把它们存储在缓存中并提供一个合适的时间给它们。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.onBackpressureBuffer&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.subscribeOn&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.io&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.observeOn&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;AndroidSchedulers&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.mainThread&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.subscribe&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;Observer&lt;/span&gt;&amp;lt;&lt;span class=&quot;tag&quot;&gt;Object&lt;/span&gt;&amp;gt;()&lt;span class=&quot;rules&quot;&gt;&amp;#123;&amp;#125;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如果你想给Observable操作符链添加多线程功能，你可以指定操作符（或者特定的Observable）在特定的调度器(Scheduler)上执行。&lt;/p&gt;
&lt;p&gt;某些ReactiveX的Observable操作符有一些变体，它们可以接受一个Scheduler参数。这个参数
    
    </summary>
    
    
      <category term="RxJava" scheme="http://gcblog.cn/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava详解</title>
    <link href="http://gcblog.cn/2016/01/04/RxJava%E8%AF%A6%E8%A7%A3/"/>
    <id>http://gcblog.cn/2016/01/04/RxJava详解/</id>
    <published>2016-01-04T05:17:53.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给 Android 开发者的 RxJava 详解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;概念：扩展的观察者模式&quot;&gt;&lt;a href=&quot;#概念：扩展的观察者模式&quot; class=&quot;headerlink&quot; title=&quot;概念：扩展的观察者模式&quot;&gt;&lt;/a&gt;概念：扩展的观察者模式&lt;/h4&gt;&lt;p&gt;RxJava 有四个基本概念：Observable (可观察者，即被观察者)、 Observer (观察者)、 subscribe (订阅)、事件。Observable 和 Observer 通过 subscribe() 方法实现订阅关系，从而 Observable 可以在需要的时候发出事件来通知 Observer。&lt;/p&gt;
&lt;p&gt;与传统观察者模式不同， RxJava 的事件回调方法除了普通事件 onNext() （相当于 onClick() / onEvent()）之外，还定义了两个特殊的事件：onCompleted() 和 onError()。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;onCompleted(): 事件队列完结。RxJava 不仅把每个事件单独处理，还会把它们看做一个队列。RxJava 规定，当不会再有新的 onNext() 发出时，需要触发 onCompleted() 方法作为标志。&lt;/li&gt;
&lt;li&gt;onError(): 事件队列异常。在事件处理过程中出异常时，onError() 会被触发，同时队列自动终止，不允许再有事件发出。&lt;/li&gt;
&lt;li&gt;在一个正确运行的事件序列中, onCompleted() 和 onError() 有且只有一个，并且是事件序列中的最后一个。需要注意的是，onCompleted() 和 onError() 二者也是互斥的，即在队列中调用了其中一个，就不应该再调用另一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RxJava 的观察者模式大致如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn2zf.com1.z0.glb.clouddn.com/rxjavarxjava_3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;基本实现&quot;&gt;&lt;a href=&quot;#基本实现&quot; class=&quot;headerlink&quot; title=&quot;基本实现&quot;&gt;&lt;/a&gt;基本实现&lt;/h4&gt;&lt;p&gt;基于以上的概念， RxJava 的基本实现主要有三点：&lt;/p&gt;
&lt;h5 id=&quot;创建-Observer&quot;&gt;&lt;a href=&quot;#创建-Observer&quot; class=&quot;headerlink&quot; title=&quot;创建 Observer&quot;&gt;&lt;/a&gt;创建 Observer&lt;/h5&gt;&lt;p&gt;Observer 即观察者，它决定事件触发的时候将有怎样的行为。 RxJava 中的 Observer 接口的实现方式：&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observer&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt; observer = &lt;span class=&quot;literal&quot;&gt;new&lt;/span&gt; Observer&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt; onNext(&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;d(&lt;span class=&quot;built_in&quot;&gt;tag&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;“Item: “&lt;/span&gt; + s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt; onCompleted() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;d(&lt;span class=&quot;built_in&quot;&gt;tag&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;“Completed!”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt; onErr&lt;span class=&quot;subst&quot;&gt;or&lt;/span&gt;(Throwable e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;d(&lt;span class=&quot;built_in&quot;&gt;tag&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;“Error!”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了 Observer 接口之外，RxJava 还内置了一个实现了 Observer 的抽象类：Subscriber。 Subscriber 对 Observer 接口进行了一些扩展，但他们的基本使用方式是完全一样的：&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Subscriber&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt; subscriber = &lt;span class=&quot;literal&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt; onNext(&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;d(&lt;span class=&quot;built_in&quot;&gt;tag&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;“Item: “&lt;/span&gt; + s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt; onCompleted() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;d(&lt;span class=&quot;built_in&quot;&gt;tag&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;“Completed!”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt; onErr&lt;span class=&quot;subst&quot;&gt;or&lt;/span&gt;(Throwable e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;d(&lt;span class=&quot;built_in&quot;&gt;tag&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;“Error!”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;不仅基本使用方式一样，实质上，在 RxJava 的 subscribe 过程中，Observer 也总是会先被转换成一个 Subscriber 再使用。所以如果你只想使用基本功能，选择 Observer 和 Subscriber 是完全一样的。它们的区别对于使用者来说主要有两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;onStart(): 这是 Subscriber 增加的方法。它会在 subscribe 刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart() 就不适用了，因为它总是在 subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法，具体可以在后面的文中看到。&lt;/li&gt;
&lt;li&gt;unsubscribe(): 这是 Subscriber 所实现的另一个接口 Subscription 的方法，用于取消订阅。在这个方法被调用后，Subscriber 将不再接收事件。一般在这个方法调用前，可以使用 isUnsubscribed() 先判断一下状态。 unsubscribe() 这个方法很重要，因为在 subscribe() 之后， Observable 会持有 Subscriber 的引用，这个引用如果不能及时被释放，将有内存泄露的风险。所以最好保持一个原则：要在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 来解除引用关系，以避免内存泄露的发生。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;创建-Observable&quot;&gt;&lt;a href=&quot;#创建-Observable&quot; class=&quot;headerlink&quot; title=&quot;创建 Observable&quot;&gt;&lt;/a&gt;创建 Observable&lt;/h5&gt;&lt;p&gt;Observable 即被观察者，它决定什么时候触发事件以及触发怎样的事件。 RxJava 使用 create() 方法来创建一个 Observable ，并为它定义事件触发规则：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.create(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observable.OnSubscribe&amp;lt;String&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Subscriber&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; String&amp;gt; subscriber)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onNext(&lt;span class=&quot;string&quot;&gt;“Hello”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onNext(&lt;span class=&quot;string&quot;&gt;“Hi”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onNext(&lt;span class=&quot;string&quot;&gt;“Aloha”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到，这里传入了一个 OnSubscribe 对象作为参数。OnSubscribe 会被存储在返回的 Observable 对象中，它的作用相当于一个计划表，当 Observable 被订阅的时候，OnSubscribe 的 call() 方法会自动被调用，事件序列就会依照设定依次触发（对于上面的代码，就是观察者Subscriber 将会被调用三次 onNext() 和一次 onCompleted()）。这样，由被观察者调用了观察者的回调方法，就实现了由被观察者向观察者的事件传递，即观察者模式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个例子很简单：事件的内容是字符串，而不是一些复杂的对象；事件的内容是已经定好了的，而不像有的观察者模式一样是待确定的（例如网络请求的结果在请求返回之前是未知的）；所有事件在一瞬间被全部发送出去，而不是夹杂一些确定或不确定的时间间隔或者经过某种触发器来触发的。总之，这个例子看起来毫无实用价值。但这是为了便于说明，实质上只要你想，各种各样的事件发送规则你都可以自己来写。至于具体怎么做，后面都会讲到，但现在不行。只有把基础原理先说明白了，上层的运用才能更容易说清楚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;create() 方法是 RxJava 最基本的创造事件序列的方法。基于这个方法， RxJava 还提供了一些方法用来快捷创建事件队列，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;just(T…): 将传入的参数依次发送出来。&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.just(&lt;span class=&quot;string&quot;&gt;“Hello”&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;“Hi”&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;“Aloha”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 将会依次调用：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Next(&lt;span class=&quot;string&quot;&gt;“Hello”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Next(&lt;span class=&quot;string&quot;&gt;“Hi”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Next(&lt;span class=&quot;string&quot;&gt;“Aloha”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Completed();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;from(T[]) / from(Iterable&amp;lt;? extends T&amp;gt;) : 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String[] words = &amp;#123;&lt;span class=&quot;string&quot;&gt;“Hello”&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;“Hi”&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;“Aloha”&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;(words);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 将会依次调用：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Next(&lt;span class=&quot;string&quot;&gt;“Hello”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Next(&lt;span class=&quot;string&quot;&gt;“Hi”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Next(&lt;span class=&quot;string&quot;&gt;“Aloha”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Completed();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面 just(T…) 的例子和 from(T[]) 的例子，都和之前的 create(OnSubscribe) 的例子是等价的。&lt;/p&gt;
&lt;h5 id=&quot;Subscribe-订阅&quot;&gt;&lt;a href=&quot;#Subscribe-订阅&quot; class=&quot;headerlink&quot; title=&quot;Subscribe (订阅)&quot;&gt;&lt;/a&gt;Subscribe (订阅)&lt;/h5&gt;&lt;p&gt;创建了 Observable 和 Observer 之后，再用 subscribe() 方法将它们联结起来，整条链子就可以工作了。代码形式很简单：&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe&lt;span class=&quot;comment&quot;&gt;(observer)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 或者：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe&lt;span class=&quot;comment&quot;&gt;(subscriber)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&amp;gt; 有人可能会注意到， subscribe() 这个方法有点怪：它看起来是『observalbe 订阅了 observer / subscriber』而不是『observer / subscriber 订阅了 observalbe』，这看起来就像『杂志订阅了读者』一样颠倒了对象关系。这让人读起来有点别扭，不过如果把 API 设计成 observer.subscribe(observable) / subscriber.subscribe(observable) ，虽然更加符合思维逻辑，但对流式 API 的设计就造成影响了，比较起来明显是得不偿失的。&lt;br&gt;&lt;br&gt;Observable.subscribe(Subscriber) 的内部实现是这样的（仅核心代码）：&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 注意：这不是 &lt;span class=&quot;keyword&quot;&gt;subscribe() &lt;/span&gt;的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Subscription &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;subscribe(Subscriber &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;subscriber) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;subscriber.onStart();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    onSubscribe.call(&lt;span class=&quot;keyword&quot;&gt;subscriber);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    return &lt;span class=&quot;keyword&quot;&gt;subscriber;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到，subscriber() 做了3件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用 Subscriber.onStart() 。这个方法在前面已经介绍过，是一个可选的准备方法。&lt;/li&gt;
&lt;li&gt;调用 Observable 中的 OnSubscribe.call(Subscriber) 。在这里，事件发送的逻辑开始运行。从这也可以看出，在 RxJava 中， Observable 并不是在创建的时候就立即开始发送事件，而是在它被订阅的时候，即当 subscribe() 方法执行的时候。&lt;/li&gt;
&lt;li&gt;将传入的 Subscriber 作为 Subscription 返回。这是为了方便 unsubscribe().&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整个过程中对象间的关系如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn2zf.com1.z0.glb.clouddn.com/rxjavarxjava_4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;或者可以看动图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn2zf.com1.z0.glb.clouddn.com/rxjavarxjava_4_d.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;除了 subscribe(Observer) 和 subscribe(Subscriber) ，subscribe() 还支持不完整定义的回调，RxJava 会自动根据定义创建出 Subscriber 。形式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Action1&lt;span class=&quot;variable&quot;&gt;&amp;lt;String&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;NextAction = new Action1&lt;span class=&quot;variable&quot;&gt;&amp;lt;String&amp;gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void call(String s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.d(&lt;span class=&quot;keyword&quot;&gt;tag&lt;/span&gt;, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Action1&lt;span class=&quot;variable&quot;&gt;&amp;lt;Throwable&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;ErrorAction = new Action1&lt;span class=&quot;variable&quot;&gt;&amp;lt;Throwable&amp;gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Error()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void call(Throwable throwable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Error handling&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Action0 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;CompletedAction = new Action0() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Completed()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void call() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.d(&lt;span class=&quot;keyword&quot;&gt;tag&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;“completed”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 自动创建 Subscriber ，并使用 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;NextAction 来定义 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe(&lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;NextAction);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 自动创建 Subscriber ，并使用 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;NextAction 和 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;ErrorAction 来定义 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Next() 和 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Error()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe(&lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;NextAction, &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;ErrorAction);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 自动创建 Subscriber ，并使用 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;NextAction、 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;ErrorAction 和 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;CompletedAction 来定义 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Next()、 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Error() 和 &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;Completed()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable.subscribe(&lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;NextAction, &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;ErrorAction, &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;CompletedAction);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;简单解释一下这段代码中出现的 Action1 和 Action0。 Action0 是 RxJava 的一个接口，它只有一个方法 call()，这个方法是无参无返回值的；由于 onCompleted() 方法也是无参无返回值的，因此 Action0 可以被当成一个包装对象，将 onCompleted() 的内容打包起来将自己作为一个参数传入 subscribe() 以实现不完整定义的回调。这样其实也可以看做将 onCompleted() 方法作为参数传进了 subscribe()，相当于其他某些语言中的『闭包』。 Action1 也是一个接口，它同样只有一个方法 call(T param)，这个方法也无返回值，但有一个参数；与 Action0 同理，由于 onNext(T obj) 和 onError(Throwable error) 也是单参数无返回值的，因此 Action1 可以将 onNext(obj) 和 onError(error) 打包起来传入 subscribe() 以实现不完整定义的回调。事实上，虽然 Action0 和 Action1 在 API 中使用最广泛，但 RxJava 是提供了多个 ActionX 形式的接口 (例如 Action2, Action3) 的，它们可以被用以包装不同的无返回值的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：正如前面所提到的，Observer 和 Subscriber 具有相同的角色，而且 Observer 在 subscribe() 过程中最终会被转换成 Subscriber 对象，因此，从这里开始，后面的描述我将用 Subscriber 来代替 Observer ，这样更加严谨。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;场景示例&quot;&gt;&lt;a href=&quot;#场景示例&quot; class=&quot;headerlink&quot; title=&quot;场景示例&quot;&gt;&lt;/a&gt;场景示例&lt;/h5&gt;&lt;p&gt;下面举两个例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了把原理用更清晰的方式表述出来，本文中挑选的都是功能尽可能简单的例子，以至于有些示例代码看起来会有『画蛇添足』『明明不用 RxJava 可以更简便地解决问题』的感觉。当你看到这种情况，不要觉得是因为 RxJava 太啰嗦，而是因为在过早的时候举出真实场景的例子并不利于原理的解析，因此我刻意挑选了简单的情景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;打印字符串数组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将字符串数组 names 中的所有字符串依次打印出来：&lt;/p&gt;
&lt;figure class=&quot;highlight vbscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;[] names = …;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.from(names)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; void &lt;span class=&quot;keyword&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;Log&lt;/span&gt;.d(tag, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;由 id 取得图片并显示&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由指定的一个 drawable 文件 id drawableRes 取得图片，并显示在 ImageView 中，并在出现异常的时候打印 Toast 报错：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; drawableRes = …;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ImageView imageView = …;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.create(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OnSubscribe&amp;lt;Drawable&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Subscriber&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; Drawable&amp;gt; subscriber)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Drawable drawable = getTheme().getDrawable(drawableRes));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onNext(drawable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observer&amp;lt;Drawable&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Drawable drawable)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        imageView.setImageDrawable(drawable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Toast.makeText(activity, &lt;span class=&quot;string&quot;&gt;“Error!”&lt;/span&gt;, Toast.LENGTH_SHORT).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;正如上面两个例子这样，创建出 Observable 和 Subscriber ，再用 subscribe() 将它们串起来，一次 RxJava 的基本使用就完成了。非常简单。&lt;/p&gt;
&lt;p&gt;在 RxJava 的默认规则中，事件的发出和消费都是在同一个线程的。也就是说，如果只用上面的方法，实现出来的只是一个同步的观察者模式。观察者模式本身的目的就是『后台处理，前台回调』的异步机制，因此异步对于 RxJava 是至关重要的。而要实现异步，则需要用到 RxJava 的另一个概念： Scheduler 。&lt;/p&gt;
&lt;h4 id=&quot;线程控制-——-Scheduler-一&quot;&gt;&lt;a href=&quot;#线程控制-——-Scheduler-一&quot; class=&quot;headerlink&quot; title=&quot;线程控制 —— Scheduler (一)&quot;&gt;&lt;/a&gt;线程控制 —— Scheduler (一)&lt;/h4&gt;&lt;p&gt;在不指定线程的情况下， RxJava 遵循的是线程不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到 Scheduler （调度器）。&lt;/p&gt;
&lt;h5 id=&quot;Scheduler-的-API-一&quot;&gt;&lt;a href=&quot;#Scheduler-的-API-一&quot; class=&quot;headerlink&quot; title=&quot;Scheduler 的 API (一)&quot;&gt;&lt;/a&gt;Scheduler 的 API (一)&lt;/h5&gt;&lt;p&gt;在RxJava 中，Scheduler ——调度器，相当于线程控制器，RxJava 通过它来指定每一段代码应该运行在什么样的线程。RxJava 已经内置了几个 Scheduler ，它们已经适合大多数的使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。&lt;/li&gt;
&lt;li&gt;Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。&lt;/li&gt;
&lt;li&gt;Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。&lt;/li&gt;
&lt;li&gt;Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。&lt;/li&gt;
&lt;li&gt;另外， Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了这几个 Scheduler ，就可以使用 subscribeOn() 和 observeOn() 两个方法来对线程进行控制了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subscribeOn(): 指定 subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。&lt;/li&gt;
&lt;li&gt;observeOn(): 指定 Subscriber 所运行在的线程。或者叫做事件消费的线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文字叙述总归难理解，上代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeOn(Schedulers.io()) &lt;span class=&quot;comment&quot;&gt;// 指定 subscribe() 发生在 IO 线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .observeOn(AndroidSchedulers.mainThread()) &lt;span class=&quot;comment&quot;&gt;// 指定 Subscriber 的回调发生在主线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Integer&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @&lt;span class=&quot;function&quot;&gt;Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Integer number)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.d(tag, &lt;span class=&quot;string&quot;&gt;“number:”&lt;/span&gt; + number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面这段代码中，由于 subscribeOn(Schedulers.io()) 的指定，被创建的事件的内容 1、2、3、4 将会在 IO 线程发出；而由于 observeOn(AndroidScheculers.mainThread()) 的指定，因此 subscriber 数字的打印将发生在主线程 。事实上，这种在 subscribe() 之前写上两句 subscribeOn(Scheduler.io()) 和 observeOn(AndroidSchedulers.mainThread()) 的使用方式非常常见，它适用于多数的 『后台线程取数据，主线程显示』的程序策略。&lt;/p&gt;
&lt;p&gt;而前面提到的由图片 id 取得图片并显示的例子，如果也加上这两句：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; drawableRes = …;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ImageView imageView = …;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.create(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OnSubscribe&amp;lt;Drawable&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Subscriber&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; Drawable&amp;gt; subscriber)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Drawable drawable = getTheme().getDrawable(drawableRes));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onNext(drawable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriber.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.subscribeOn(Schedulers.io()) &lt;span class=&quot;comment&quot;&gt;// 指定 subscribe() 发生在 IO 线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.observeOn(AndroidSchedulers.mainThread()) &lt;span class=&quot;comment&quot;&gt;// 指定 Subscriber 的回调发生在主线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observer&amp;lt;Drawable&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Drawable drawable)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        imageView.setImageDrawable(drawable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Toast.makeText(activity, &lt;span class=&quot;string&quot;&gt;“Error!”&lt;/span&gt;, Toast.LENGTH_SHORT).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么，加载图片将会发生在 IO 线程，而设置图片则被设定在了主线程。这就意味着，即使加载图片耗费了几十甚至几百毫秒的时间，也不会造成丝毫界面的卡顿。&lt;/p&gt;
&lt;h5 id=&quot;Scheduler-的原理-一&quot;&gt;&lt;a href=&quot;#Scheduler-的原理-一&quot; class=&quot;headerlink&quot; title=&quot;Scheduler 的原理 (一)&quot;&gt;&lt;/a&gt;Scheduler 的原理 (一)&lt;/h5&gt;&lt;p&gt;RxJava 的 Scheduler API 很方便，也很神奇（加了一句话就把线程切换了，怎么做到的？而且 subscribe() 不是最外层直接调用的方法吗，它竟然也能被指定线程？）。然而 Scheduler 的原理需要放在后面讲，因为它的原理是以下一节《变换》的原理作为基础的。&lt;/p&gt;
&lt;p&gt;好吧这一节其实我屁也没说，只是为了让你安心，让你知道我不是忘了讲原理，而是把它放在了更合适的地方。&lt;/p&gt;
&lt;h4 id=&quot;变换&quot;&gt;&lt;a href=&quot;#变换&quot; class=&quot;headerlink&quot; title=&quot;变换&quot;&gt;&lt;/a&gt;变换&lt;/h4&gt;&lt;p&gt;终于要到牛逼的地方了，不管你激动不激动，反正我是激动了。&lt;/p&gt;
&lt;p&gt;RxJava 提供了对事件序列进行变换的支持，这是它的核心功能之一，也是大多数人说『RxJava 真是太好用了』的最大原因。&lt;strong&gt;所谓变换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。概念说着总是模糊难懂的，来看 API。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h5&gt;&lt;p&gt;首先看一个 map() 的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(&lt;span class=&quot;string&quot;&gt;“images/logo.png”&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 输入类型 String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .map(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;String, Bitmap&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;Bitmap &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String filePath)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// 参数类型 String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getBitmapFromPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(filePath)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 返回类型 Bitmap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Bitmap&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bitmap bitmap)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// 参数类型 Bitmap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            showBitmap(bitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里出现了一个叫做 Func1 的类。它和 Action1 非常相似，也是 RxJava 的一个接口，用于包装含有一个参数的方法。 Func1 和 Action 的区别在于， Func1 包装的是有返回值的方法。另外，和 ActionX 一样， FuncX 也有多个，用于不同参数个数的方法。FuncX 和 ActionX 的区别在 FuncX 包装的是有返回值的方法。&lt;/p&gt;
&lt;p&gt;可以看到，map() 方法将参数中的 String 对象转换成一个 Bitmap 对象后返回，而在经过 map() 方法后，事件的参数类型也由 String 转为了 Bitmap。这种直接变换对象并返回的，是最常见的也最容易理解的变换。不过 RxJava 的变换远不止这样，它不仅可以针对事件对象，还可以针对整个事件队列，这使得 RxJava 变得非常灵活。我列举几个常用的变换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map(): 事件对象的直接变换，具体功能上面已经介绍过。它是 RxJava 最常用的变换。 map() 的示意图：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn2zf.com1.z0.glb.clouddn.com/rxjavarxjava_6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flatMap(): 这是一个很有用但非常难理解的变换，因此我决定花多些篇幅来介绍它。 首先假设这么一种需求：假设有一个数据结构『学生』，现在需要打印出一组学生的名字。实现方式很简单：&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Student[] students = …;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Subscriber&amp;lt;&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;&amp;gt; subscriber = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; onNext(&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.d(tag, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.from(students)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;Student, &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; call(Student student) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; student.getName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(subscriber);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很简单。那么再假设：如果要打印出每个学生所需要修的所有课程的名称呢？（需求的区别在于，每个学生只有一个名字，但却有多个课程。）首先可以这样实现：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Student[] students = …;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Subscriber&amp;lt;Student&amp;gt; subscriber = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;Student&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @&lt;span class=&quot;function&quot;&gt;Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Student student&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Course&amp;gt; courses = student.getCourses();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; courses.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Course course = courses.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.d(tag, course.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;(students)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(subscriber);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;依然很简单。那么如果我不想在 Subscriber 中使用 for 循环，而是希望 Subscriber 中直接传入单个的 Course 对象呢（这对于代码复用很重要）？用 map() 显然是不行的，因为 map() 是一对一的转化，而我现在的要求是一对多的转化。那怎么才能把一个 Student 转化成多个 Course 呢？&lt;/p&gt;
&lt;p&gt;这个时候，就需要用 flatMap() 了：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Student[] students = …;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Subscriber&amp;lt;Course&amp;gt; subscriber = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;Course&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @&lt;span class=&quot;function&quot;&gt;Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Course course&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.d(tag, course.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;(students)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;Student, Observable&amp;lt;Course&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @&lt;span class=&quot;function&quot;&gt;Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;Course&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Student student&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;(student.getCourses());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(subscriber);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;从上面的代码可以看出， flatMap() 和 map() 有一个相同点：它也是把传入的参数转化之后返回另一个对象。但需要注意，和 map() 不同的是， flatMap() 中返回的是个 Observable 对象，并且这个 Observable 对象并不是被直接发送到了 Subscriber 的回调方法中。 flatMap() 的原理是这样的：1. 使用传入的事件对象创建一个 Observable 对象；2. 并不发送这个 Observable, 而是将它激活，于是它开始发送事件；3. 每一个创建出来的 Observable 发送的事件，都被汇入同一个 Observable ，而这个 Observable 负责将这些事件统一交给 Subscriber 的回调方法。这三个步骤，把事件拆成了两级，通过一组新创建的 Observable 将初始的对象『铺平』之后通过统一路径分发了下去。而这个『铺平』就是 flatMap() 所谓的 flat。&lt;/p&gt;
&lt;p&gt;flatMap() 示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn2zf.com1.z0.glb.clouddn.com/rxjavarxjava_7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;扩展：由于可以在嵌套的 Observable 中添加异步代码， flatMap() 也常用于嵌套的异步操作，例如嵌套的网络请求。示例代码（Retrofit + RxJava）：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;networkClient.token() &lt;span class=&quot;comment&quot;&gt;// 返回 Observable&amp;lt;String&amp;gt;，在订阅时请求 token，并在响应后发送 token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;String, Observable&amp;lt;Messages&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;Messages&amp;gt; call(String token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 返回 Observable&amp;lt;Messages&amp;gt;，在订阅时请求消息列表，并在响应后发送请求到的消息列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; networkClient.&lt;span class=&quot;title&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Messages&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Messages messages)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 处理显示消息列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            showMessages(messages);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;传统的嵌套请求需要使用嵌套的 Callback 来实现。而通过 flatMap() ，可以把嵌套的请求写在一条链中，从而保持程序逻辑的清晰。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;throttleFirst()&lt;/code&gt;: 在每次事件触发后的一定时间间隔内丢弃新的事件。常用作去抖动过滤，例如按钮的点击监听器：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RxView.clickEvents(button) &lt;span class=&quot;comment&quot;&gt;// RxBinding 代码，后面的文章有解释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .throttleFirst(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;, TimeUnit.MILLISECONDS) &lt;span class=&quot;comment&quot;&gt;// 设置防抖间隔为 500ms&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(subscriber);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;此外， RxJava 还提供很多便捷的方法来实现事件序列的变换，这里就不一一举例了。&lt;/p&gt;
&lt;h5 id=&quot;变换的原理：lift&quot;&gt;&lt;a href=&quot;#变换的原理：lift&quot; class=&quot;headerlink&quot; title=&quot;变换的原理：lift()&quot;&gt;&lt;/a&gt;变换的原理：lift()&lt;/h5&gt;&lt;p&gt;这些变换虽然功能各有不同，但实质上都是针对事件序列的处理和再发送。而在 RxJava 的内部，它们是基于同一个基础的变换方法： lift(Operator)。首先看一下 lift() 的内部实现（仅核心代码）：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 注意：这不是 lift() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &amp;lt;R&amp;gt; Observable&amp;lt;R&amp;gt; lift(Operator&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; R, ? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T&amp;gt; operator) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.&lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OnSubscribe&amp;lt;R&amp;gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Subscriber subscriber)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Subscriber newSubscriber = operator.call(subscriber);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            newSubscriber.onStart();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            onSubscribe.call(newSubscriber);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这段代码很有意思：它生成了一个新的 Observable 并返回，而且创建新 Observable 所用的参数 OnSubscribe 的回调方法 call() 中的实现竟然看起来和前面讲过的 Observable.subscribe() 一样！然而它们并不一样哟~不一样的地方关键就在于第二行 onSubscribe.call(subscriber) 中的 onSubscribe 所指代的对象不同（高能预警：接下来的几句话可能会导致身体的严重不适）——&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subscribe() 中这句话的 onSubscribe 指的是 Observable 中的 onSubscribe 对象，这个没有问题，但是 lift() 之后的情况就复杂了点。&lt;/li&gt;
&lt;li&gt;当含有 lift() 时：&lt;pre&gt;&lt;code&gt;1.  lift() 创建了一个 Observable 后，加上之前的原始 Observable，已经有两个 Observable 了；2.  而同样地，新 Observable 里的新 OnSubscribe 加上之前的原始 Observable 中的原始 OnSubscribe，也就有了两个 OnSubscribe；3.  当用户调用经过 lift() 后的 Observable 的 subscribe() 的时候，使用的是 lift() 所返回的新的 Observable ，于是它所触发的 onSubscribe.call(subscriber)，也是用的新 Observable 中的新 OnSubscribe，即在 lift() 中生成的那个 OnSubscribe；4.  而这个新 OnSubscribe 的 call() 方法中的 onSubscribe ，就是指的原始 Observable 中的原始 OnSubscribe ，在这个 call() 方法里，新 OnSubscribe 利用 operator.call(subscriber) 生成了一个新的 Subscriber（Operator 就是在这里，通过自己的 call() 方法将新 Subscriber 和原始 Subscriber 进行关联，并插入自己的『变换』代码以实现变换），然后利用这个新 Subscriber 向原始 Observable 进行订阅。
&lt;/code&gt;&lt;/pre&gt;这样就实现了 lift() 过程，有点&lt;strong&gt;像一种代理机制，通过事件拦截和处理实现事件序列的变换。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;精简掉细节的话，也可以这么说：在 Observable 执行了 lift(Operator) 方法之后，会返回一个新的 Observable，这个新的 Observable 会像一个代理一样，负责接收原始的 Observable 发出的事件，并在处理后发送给 Subscriber。&lt;/p&gt;
&lt;p&gt;如果你更喜欢具象思维，可以看图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn2zf.com1.z0.glb.clouddn.com/rxjavarxjava_8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;或者可以看动图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn2zf.com1.z0.glb.clouddn.com/rxjavarxjava_8_d.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;两次和多次的 lift() 同理，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn2zf.com1.z0.glb.clouddn.com/rxjavarxjava_9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;举一个具体的 Operator 的实现。下面这是一个将事件中的 Integer 对象转换成 String 的例子，仅供参考：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;observable.lift(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observable.Operator&amp;lt;String, Integer&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Subscriber&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; Integer&amp;gt; call(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Subscriber&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; String&amp;gt; subscriber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 将事件序列中的 Integer 对象转换为 String 对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;Integer&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Integer integer)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                subscriber.onNext(&lt;span class=&quot;string&quot;&gt;“”&lt;/span&gt; + integer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                subscriber.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                subscriber.onError(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&amp;gt; 讲述 lift() 的原理只是为了让你更好地了解 RxJava ，从而可以更好地使用它。然而不管你是否理解了 lift() 的原理，RxJava 都不建议开发者自定义 Operator 来直接使用 lift()，而是建议尽量使用已有的 lift() 包装方法（如 map() flatMap() 等）进行组合来实现需求，因为直接使用 lift() 非常容易发生一些难以发现的错误。&lt;br&gt;&lt;br&gt;##### compose: 对 Observable 整体的变换&lt;br&gt;&lt;br&gt;除了 lift() 之外， Observable 还有一个变换方法叫做 compose(Transformer)。它和 lift() 的区别在于， lift() &lt;strong&gt;是针对事件项和事件序列的，而 compose() 是针对 Observable 自身进行变换。&lt;/strong&gt;举个例子，假设在程序中有多个 Observable ，并且他们都需要应用一组相同的 lift() 变换。你可以这么写：&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;observable1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift1&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift2&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift3&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift4&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.subscribe&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;subscriber1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;observable2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift1&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift2&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift3&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift4&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.subscribe&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;subscriber2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;observable3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift1&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift2&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift3&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift4&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.subscribe&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;subscriber3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;observable4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift1&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift2&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift3&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.lift4&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.subscribe&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;subscriber1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你觉得这样太不软件工程了，于是你改成了这样：&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private Observable liftAll(Observable observable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .lift1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .lift2()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .lift3()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .lift4()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;liftAll(observable1).subscribe(subscriber1)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;liftAll(observable2).subscribe(subscriber2)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;liftAll(observable3).subscribe(subscriber3)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;liftAll(observable4).subscribe(subscriber4)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可读性、可维护性都提高了。可是 Observable 被一个方法包起来，这种方式对于 Observale 的灵活性似乎还是增添了那么点限制。怎么办？这个时候，就应该用 compose() 来解决了：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LiftAllTransformer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observable&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Transformer&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Observable&amp;lt;Integer&amp;gt; observable)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .lift1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .lift2()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .lift3()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .lift4();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transformer liftAll = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LiftAllTransformer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable1.compose(liftAll).subscribe(subscriber1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable2.compose(liftAll).subscribe(subscriber2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable3.compose(liftAll).subscribe(subscriber3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;observable4.compose(liftAll).subscribe(subscriber4);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;像上面这样，使用 compose() 方法，Observable 可以利用传入的 Transformer 对象的 call 方法直接对自身进行处理，也就不必被包在方法的里面了。&lt;/p&gt;
&lt;p&gt;compose() 的原理比较简单，不附图喽。&lt;/p&gt;
&lt;h4 id=&quot;线程控制：Scheduler-二&quot;&gt;&lt;a href=&quot;#线程控制：Scheduler-二&quot; class=&quot;headerlink&quot; title=&quot;线程控制：Scheduler (二)&quot;&gt;&lt;/a&gt;线程控制：Scheduler (二)&lt;/h4&gt;&lt;p&gt;除了灵活的变换，RxJava 另一个牛逼的地方，就是线程的自由控制。&lt;/p&gt;
&lt;h5 id=&quot;Scheduler-的-API-二&quot;&gt;&lt;a href=&quot;#Scheduler-的-API-二&quot; class=&quot;headerlink&quot; title=&quot;Scheduler 的 API (二)&quot;&gt;&lt;/a&gt;Scheduler 的 API (二)&lt;/h5&gt;&lt;p&gt;前面讲到了，可以利用 subscribeOn() 结合 observeOn() 来实现线程控制，让事件的产生和消费发生在不同的线程。可是在了解了 map() flatMap() 等变换方法后，有些好事的（其实就是当初刚接触 RxJava 时的我）就问了：能不能多切换几次线程？&lt;/p&gt;
&lt;p&gt;答案是：能。因为 observeOn() 指定的是 Subscriber 的线程，而这个 Subscriber 并不是（严格说应该为『不一定是』，但这里不妨理解为『不是』）subscribe() 参数中的 Subscriber ，而是 observeOn() 执行时的当前 Observable 所对应的 Subscriber ，即它的直接下级 Subscriber 。换句话说，observeOn() 指定的是它之后的操作所在的线程。因此如果有多次切换线程的需求，只要在每个想要切换线程的位置调用一次 observeOn() 即可。上代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// IO 线程，由 subscribeOn() 指定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeOn(Schedulers.io())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .observeOn(Schedulers.newThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(mapOperator) &lt;span class=&quot;comment&quot;&gt;// 新线程，由 observeOn() 指定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .observeOn(Schedulers.io())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(mapOperator2) &lt;span class=&quot;comment&quot;&gt;// IO 线程，由 observeOn() 指定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .observeOn(AndroidSchedulers.mainThread) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(subscriber);  &lt;span class=&quot;comment&quot;&gt;// Android 主线程，由 observeOn() 指定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如上，通过 observeOn() 的多次调用，程序实现了线程的多次切换。&lt;/p&gt;
&lt;p&gt;不过，不同于 observeOn() ， subscribeOn() 的位置放在哪里都可以，但它是只能调用一次的。&lt;/p&gt;
&lt;p&gt;又有好事的（其实还是当初的我）问了：如果我非要调用多次 subscribeOn() 呢？会有什么效果？&lt;/p&gt;
&lt;p&gt;这个问题先放着，我们还是从 RxJava 线程控制的原理说起吧。&lt;/p&gt;
&lt;h5 id=&quot;Scheduler-的原理（二）&quot;&gt;&lt;a href=&quot;#Scheduler-的原理（二）&quot; class=&quot;headerlink&quot; title=&quot;Scheduler 的原理（二）&quot;&gt;&lt;/a&gt;Scheduler 的原理（二）&lt;/h5&gt;&lt;p&gt;其实， subscribeOn() 和 observeOn() 的内部实现，也是用的 lift()。具体看图（不同颜色的箭头表示不同的线程）：&lt;/p&gt;
&lt;p&gt;subscribeOn() 原理图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn2zf.com1.z0.glb.clouddn.com/rxjavarxjava_10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;observeOn() 原理图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn2zf.com1.z0.glb.clouddn.com/rxjavarxjava_11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看出，subscribeOn() 和 observeOn() 都做了线程切换的工作（图中的 “schedule…” 部位）。不同的是， subscribeOn() 的线程切换发生在 OnSubscribe 中，即在它通知上一级 OnSubscribe 时，这时事件还没有开始发送，因此 subscribeOn() 的线程控制可以从事件发出的开端就造成影响；而 observeOn() 的线程切换则发生在它内建的 Subscriber 中，即发生在它即将给下一级 Subscriber 发送事件时，因此 observeOn() 控制的是它后面的线程。&lt;/p&gt;
&lt;p&gt;最后，我用一张图来解释当多个 subscribeOn() 和 observeOn() 混合使用时，线程调度是怎么发生的（由于图中对象较多，相对于上面的图对结构做了一些简化调整）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn2zf.com1.z0.glb.clouddn.com/rxjavarxjava_12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中共有 5 处含有对事件的操作。由图中可以看出，①和②两处受第一个 subscribeOn() 影响，运行在红色线程；③和④处受第一个 observeOn() 的影响，运行在绿色线程；⑤处受第二个 onserveOn() 影响，运行在紫色线程；而第二个 subscribeOn() ，由于在通知过程中线程就被第一个 subscribeOn() 截断，因此对整个流程并没有任何影响。这里也就回答了前面的问题：当使用了多个 subscribeOn() 的时候，只有第一个 subscribeOn() 起作用。&lt;/p&gt;
&lt;h5 id=&quot;延伸：doOnSubscribe&quot;&gt;&lt;a href=&quot;#延伸：doOnSubscribe&quot; class=&quot;headerlink&quot; title=&quot;延伸：doOnSubscribe()&quot;&gt;&lt;/a&gt;延伸：doOnSubscribe()&lt;/h5&gt;&lt;p&gt;然而，虽然超过一个的 subscribeOn() 对事件处理的流程没有影响，但在流程之前却是可以利用的。&lt;/p&gt;
&lt;p&gt;在前面讲 Subscriber 的时候，提到过 Subscriber 的 onStart() 可以用作流程开始前的初始化。然而 onStart() 由于在 subscribe() 发生时就被调用了，因此不能指定线程，而是只能执行在 subscribe() 被调用时的线程。这就导致如果 onStart() 中含有对线程有要求的代码（例如在界面上显示一个 ProgressBar，这必须在主线程执行），将会有线程非法的风险，因为有时你无法预测 subscribe() 将会在什么线程执行。&lt;/p&gt;
&lt;p&gt;而与 Subscriber.onStart() 相对应的，有一个方法 Observable.doOnSubscribe() 。它和 Subscriber.onStart() 同样是在 subscribe() 调用后而且在事件发送前执行，但区别在于它可以指定线程。默认情况下， doOnSubscribe() 执行在 subscribe() 发生的线程；而如果在 doOnSubscribe() 之后有 subscribeOn() 的话，它将执行在离它最近的 subscribeOn() 所指定的线程。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.create(onSubscribe)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeOn(Schedulers.io())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .doOnSubscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action0() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            progressBar.setVisibility(View.VISIBLE); &lt;span class=&quot;comment&quot;&gt;// 需要在主线程执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribeOn(AndroidSchedulers.mainThread()) &lt;span class=&quot;comment&quot;&gt;// 指定主线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(subscriber);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如上，在 doOnSubscribe()的后面跟一个 subscribeOn() ，就能指定准备工作的线程了。&lt;/p&gt;
&lt;h4 id=&quot;RxJava-的适用场景和使用方式&quot;&gt;&lt;a href=&quot;#RxJava-的适用场景和使用方式&quot; class=&quot;headerlink&quot; title=&quot;RxJava 的适用场景和使用方式&quot;&gt;&lt;/a&gt;RxJava 的适用场景和使用方式&lt;/h4&gt;&lt;h5 id=&quot;与-Retrofit-的结合&quot;&gt;&lt;a href=&quot;#与-Retrofit-的结合&quot; class=&quot;headerlink&quot; title=&quot;与 Retrofit 的结合&quot;&gt;&lt;/a&gt;与 Retrofit 的结合&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;Retrofit 是 Square 的一个著名的网络请求库。没有用过 Retrofit 的可以选择跳过这一小节也没关系，我举的每种场景都只是个例子，而且例子之间并无前后关联，只是个抛砖引玉的作用，所以你跳过这里看别的场景也可以的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Retrofit 除了提供了传统的 Callback 形式的 API，还有 RxJava 版本的 Observable 形式 API。下面我用对比的方式来介绍 Retrofit 的 RxJava 版 API 和传统版本的区别。&lt;/p&gt;
&lt;p&gt;以获取一个 User 对象的接口作为例子。使用Retrofit 的传统 API，你可以用这样的方式来定义请求：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“/user”&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void &lt;span class=&quot;function&quot;&gt;getUser&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“userId”&lt;/span&gt;) String userId, Callback&amp;lt;User&amp;gt; callback);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在程序的构建过程中， Retrofit 会把自动把方法实现并生成代码，然后开发者就可以利用下面的方法来获取特定用户并处理响应：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getUser(userId, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        userView.setUser(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(RetrofitError &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;而使用 RxJava 形式的 API，定义同样的请求是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“/user”&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public Observable&amp;lt;User&amp;gt; &lt;span class=&quot;function&quot;&gt;getUser&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“userId”&lt;/span&gt;) String userId);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用的时候是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getUser(userId)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observer&amp;lt;User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            userView.setUser(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;看到区别了吗？&lt;/p&gt;
&lt;p&gt;当 RxJava 形式的时候，Retrofit 把请求封装进 Observable ，在请求结束后调用 onNext() 或在请求失败后调用 onError()。&lt;/p&gt;
&lt;p&gt;对比来看， Callback 形式和 Observable 形式长得不太一样，但本质都差不多，而且在细节上 Observable 形式似乎还比 Callback 形式要差点。那 Retrofit 为什么还要提供 RxJava 的支持呢？&lt;/p&gt;
&lt;p&gt;因为它好用啊！从这个例子看不出来是因为这只是最简单的情况。而一旦情景复杂起来， Callback 形式马上就会开始让人头疼。比如：&lt;/p&gt;
&lt;p&gt;假设这么一种情况：你的程序取到的 User 并不应该直接显示，而是需要先与数据库中的数据进行比对和修正后再显示。使用 Callback 方式大概可以这么写：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getUser(userId, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        processUser(user); &lt;span class=&quot;comment&quot;&gt;// 尝试修正 User 数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        userView.setUser(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(RetrofitError &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有问题吗？&lt;/p&gt;
&lt;p&gt;很简便，但不要这样做。为什么？因为这样做会影响性能。数据库的操作很重，一次读写操作花费 10~20ms 是很常见的，这样的耗时很容易造成界面的卡顿。所以通常情况下，如果可以的话一定要避免在主线程中处理数据库。所以为了提升性能，这段代码可以优化一下：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getUser(userId, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                processUser(user); &lt;span class=&quot;comment&quot;&gt;// 尝试修正 User 数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                runOnUiThread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 切回 UI 线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        userView.setUser(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(RetrofitError &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;性能问题解决，但……这代码实在是太乱了，迷之缩进啊！杂乱的代码往往不仅仅是美观问题，因为代码越乱往往就越难读懂，而如果项目中充斥着杂乱的代码，无疑会降低代码的可读性，造成团队开发效率的降低和出错率的升高。&lt;/p&gt;
&lt;p&gt;这时候，如果用 RxJava 的形式，就好办多了。 RxJava 形式的代码是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getUser(userId)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .doOnNext(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            processUser(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observer&amp;lt;User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            userView.setUser(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;后台代码和前台代码全都写在一条链中，明显清晰了很多。&lt;/p&gt;
&lt;p&gt;再举一个例子：假设 /user 接口并不能直接访问，而需要填入一个在线获取的 token ，代码应该怎么写？&lt;/p&gt;
&lt;p&gt;Callback 方式，可以使用嵌套的 Callback：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“/token”&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Callback&amp;lt;String&amp;gt; callback)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“/user”&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; getUser(&lt;span class=&quot;annotation&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“token”&lt;/span&gt;) String token, &lt;span class=&quot;annotation&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“userId”&lt;/span&gt;) String userId, Callback&amp;lt;User&amp;gt; callback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getToken(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;String&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String token)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getUser(userId, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                userView.setUser(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(RetrofitError &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// Error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(RetrofitError &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;倒是没有什么性能问题，可是迷之缩进毁一生，你懂我也懂，做过大项目的人应该更懂。&lt;/p&gt;
&lt;p&gt;而使用 RxJava 的话，代码是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“/token”&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;String&amp;gt; getToken();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“/user”&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; getUser(&lt;span class=&quot;annotation&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“token”&lt;/span&gt;) String token, &lt;span class=&quot;annotation&quot;&gt;@Query&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“userId”&lt;/span&gt;) String userId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getToken()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;String, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; onNext(String token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(token, userId)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observer&amp;lt;User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            userView.setUser(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;用一个 flatMap() 就搞定了逻辑，依然是一条链。看着就很爽，是吧？&lt;/p&gt;
&lt;p&gt;好，Retrofit 部分就到这里。&lt;/p&gt;
&lt;h5 id=&quot;RxBinding&quot;&gt;&lt;a href=&quot;#RxBinding&quot; class=&quot;headerlink&quot; title=&quot;RxBinding&quot;&gt;&lt;/a&gt;RxBinding&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/JakeWharton/RxBinding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxBinding&lt;/a&gt; 是 Jake Wharton 的一个开源库，它提供了一套在 Android 平台上的基于 RxJava 的 Binding API。所谓 Binding，就是类似设置 OnClickListener 、设置 TextWatcher 这样的注册绑定对象的 API。&lt;/p&gt;
&lt;p&gt;举个设置点击监听的例子。使用 RxBinding ，可以把事件监听用这样的方法来设置：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Button button = …;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RxView.clickEvents(button) &lt;span class=&quot;comment&quot;&gt;// 以 Observable 形式来反馈点击事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;ViewClickEvent&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ViewClickEvent event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// Click handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;看起来除了形式变了没什么区别，实质上也是这样。甚至如果你看一下它的源码，你会发现它连实现都没什么惊喜：它的内部是直接用一个包裹着的 setOnClickListener() 来实现的。然而，仅仅这一个形式的改变，却恰好就是 RxBinding 的目的：扩展性。通过 RxBinding 把点击监听转换成 Observable 之后，就有了对它进行扩展的可能。扩展的方式有很多，根据需求而定。一个例子是前面提到过的 throttleFirst() ，用于去抖动，也就是消除手抖导致的快速连环点击：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;RxView&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.clickEvents&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;button&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.throttleFirst&lt;/span&gt;(500, &lt;span class=&quot;tag&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.MILLISECONDS&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;.subscribe&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;clickAction&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果想对 RxBinding 有更多了解，可以去它的 GitHub 项目 下面看看。&lt;/p&gt;
&lt;h5 id=&quot;各种异步操作&quot;&gt;&lt;a href=&quot;#各种异步操作&quot; class=&quot;headerlink&quot; title=&quot;各种异步操作&quot;&gt;&lt;/a&gt;各种异步操作&lt;/h5&gt;&lt;p&gt;前面举的 Retrofit 和 RxBinding 的例子，是两个可以提供现成的 Observable 的库。而如果你有某些异步操作无法用这些库来自动生成 Observable，也完全可以自己写。例如数据库的读写、大图片的载入、文件压缩/解压等各种需要放在后台工作的耗时操作，都可以用 RxJava 来实现，有了之前几章的例子，这里应该不用再举例了。&lt;/p&gt;
&lt;h4 id=&quot;RxBus&quot;&gt;&lt;a href=&quot;#RxBus&quot; class=&quot;headerlink&quot; title=&quot;RxBus&quot;&gt;&lt;/a&gt;RxBus&lt;/h4&gt;&lt;p&gt;RxBus 名字看起来像一个库，但它并不是一个库，而是一种模式，它的思想是使用 RxJava 来实现了 EventBus ，而让你不再需要使用 Otto 或者 GreenRobot 的 EventBus。至于什么是 RxBus，可以看这篇文章。顺便说一句，Flipboard 已经用 RxBus 替换掉了 Otto ，目前为止没有不良反应。&lt;/p&gt;
&lt;h4 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h4&gt;&lt;p&gt;对于 Android 开发者来说， RxJava 是一个很难上手的库，因为它对于 Android 开发者来说有太多陌生的概念了。可是它真的很牛逼。因此，我写了这篇《给 Android 开发者的 RxJava 详解》，希望能给始终搞不明白什么是 RxJava 的人一些入门的指引，或者能让正在使用 RxJava 但仍然心存疑惑的人看到一些更深入的解析。无论如何，只要能给各位同为 Android 工程师的你们提供一些帮助，这篇文章的目的就达到了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;给 Android 开发者的 RxJava 详解&lt;/a&gt;&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="RxJava" scheme="http://gcblog.cn/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Vim命令</title>
    <link href="http://gcblog.cn/2016/01/02/Vim%E5%91%BD%E4%BB%A4/"/>
    <id>http://gcblog.cn/2016/01/02/Vim命令/</id>
    <published>2016-01-02T14:28:09.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;http://my.oschina.net/u/1455799/blog/214448?fromerr=oMXPHQ26&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.oschina.net/u/1455799/blog/214448?fromerr=oMXPHQ26&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第一级-–-存活&quot;&gt;&lt;a href=&quot;#第一级-–-存活&quot; class=&quot;headerlink&quot; title=&quot;第一级 – 存活&quot;&gt;&lt;/a&gt;第一级 – 存活&lt;/h3&gt;&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;i → Insert 模式，按 ESC 回到 Normal 模式.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x → 删当前光标所在的一个字符。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;:wq → 存盘 + 退出 (:w&lt;/span&gt; 存盘, :q 退出)   （陈皓注：:w 后可以跟文件名）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dd → 删除当前行，并把删除的行存到剪贴板里&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p → 粘贴剪贴板&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;推荐:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hjkl (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;:help &amp;lt;command&amp;gt; → 显示相关命令的帮助。你也可以就输入 :help&lt;/span&gt; 而不跟命令。（陈皓注：退出帮助需要输入:q）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;第二级-–-感觉良好&quot;&gt;&lt;a href=&quot;#第二级-–-感觉良好&quot; class=&quot;headerlink&quot; title=&quot;第二级 – 感觉良好&quot;&gt;&lt;/a&gt;第二级 – 感觉良好&lt;/h3&gt;&lt;h4 id=&quot;各种插入模式&quot;&gt;&lt;a href=&quot;#各种插入模式&quot; class=&quot;headerlink&quot; title=&quot;各种插入模式&quot;&gt;&lt;/a&gt;各种插入模式&lt;/h4&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; → 在光标后插入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;o → 在当前行后插入一个新行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;O → 在当前行前插入一个新行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cw → 替换从光标所在位置后到一个单词结尾的字符&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;简单的移动光标&quot;&gt;&lt;a href=&quot;#简单的移动光标&quot; class=&quot;headerlink&quot; title=&quot;简单的移动光标&quot;&gt;&lt;/a&gt;简单的移动光标&lt;/h4&gt;&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; → 数字零，到行头&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^ → 到本行第一个不是&lt;span class=&quot;keyword&quot;&gt;blank&lt;/span&gt;字符的位置（所谓&lt;span class=&quot;keyword&quot;&gt;blank&lt;/span&gt;字符就是空格，tab，换行，回车等）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ → 到本行行尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;g_ → 到本行最后一个不是&lt;span class=&quot;keyword&quot;&gt;blank&lt;/span&gt;字符的位置。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;拷贝-粘贴&quot;&gt;&lt;a href=&quot;#拷贝-粘贴&quot; class=&quot;headerlink&quot; title=&quot;拷贝/粘贴&quot;&gt;&lt;/a&gt;拷贝/粘贴&lt;/h4&gt;&lt;figure class=&quot;highlight tp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;P&lt;/span&gt; → 粘贴（p/&lt;span class=&quot;keyword&quot;&gt;P&lt;/span&gt;都可以，p是表示在当前位置之后，&lt;span class=&quot;keyword&quot;&gt;P&lt;/span&gt;表示在当前位置之前）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yy → 拷贝当前行当行于 ddP&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;Undo-Redo&quot;&gt;&lt;a href=&quot;#Undo-Redo&quot; class=&quot;headerlink&quot; title=&quot;Undo/Redo&quot;&gt;&lt;/a&gt;Undo/Redo&lt;/h4&gt;&lt;figure class=&quot;highlight mel&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;u → &lt;span class=&quot;keyword&quot;&gt;undo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;C-r&amp;gt; → &lt;span class=&quot;keyword&quot;&gt;redo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;打开-保存-退出-改变文件-Buffer&quot;&gt;&lt;a href=&quot;#打开-保存-退出-改变文件-Buffer&quot; class=&quot;headerlink&quot; title=&quot;打开/保存/退出/改变文件(Buffer)&quot;&gt;&lt;/a&gt;打开/保存/退出/改变文件(Buffer)&lt;/h4&gt;&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:e &amp;lt;path/to/file&amp;gt; → 打开一个文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:w → 存盘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:saveas &amp;lt;path/to/file&amp;gt; → 另存为 &amp;lt;path/to/file&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;:x， ZZ 或 :wq&lt;/span&gt; → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;:q! → 退出不保存 :qa!&lt;/span&gt; 强行退出所有的正在编辑的文件，就算别的文件有更改。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;:bn 和 :bp&lt;/span&gt; → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（陈皓注：我喜欢使用:n到下一个文件）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;第三级-–-更好，更强，更快&quot;&gt;&lt;a href=&quot;#第三级-–-更好，更强，更快&quot; class=&quot;headerlink&quot; title=&quot;第三级 – 更好，更强，更快&quot;&gt;&lt;/a&gt;第三级 – 更好，更强，更快&lt;/h3&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;. → (小数点) 可以重复上一次的命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;N&amp;lt;&lt;span class=&quot;command&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;command&lt;/span&gt;&amp;gt; → 重复某个命令&lt;span class=&quot;title&quot;&gt;N&lt;/span&gt;次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面是一个示例，找开一个文件你可以试试下面的命令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2dd → 删除2行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3p → 粘贴文本3次&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;100idesu [ESC] → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;→ 重复上一个命令—— 100 “desu “.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;→ 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;更强&quot;&gt;&lt;a href=&quot;#更强&quot; class=&quot;headerlink&quot; title=&quot;更强&quot;&gt;&lt;/a&gt;更强&lt;/h4&gt;&lt;p&gt;你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NG → 到第 &lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt; 行 （陈皓注：注意命令中的&lt;span class=&quot;keyword&quot;&gt;G&lt;/span&gt;是大写的，另我一般使用 : &lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt; 到第&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;行，如 :137 到第137行）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gg → 到第一行。（陈皓注：相当于1G，或 :1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;G&lt;/span&gt; → 到最后一行。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;按单词移动：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成（陈皓注：程序变量）&lt;/p&gt;
&lt;p&gt;如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。（陈皓注：程序语句）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/img/201403/30213311_pgWj.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;w → 到下一个单词的开头。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;e → 到下一个单词的结尾。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面，让我来说说最强的光标移动：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;% : 匹配括号移动，包括 (, {, [. （陈皓注：你需要把光标先移到括号上）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;更快&quot;&gt;&lt;a href=&quot;#更快&quot; class=&quot;headerlink&quot; title=&quot;更快&quot;&gt;&lt;/a&gt;更快&lt;/h4&gt;&lt;p&gt;你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：&lt;/p&gt;
&lt;start position=&quot;&quot;&gt;&lt;command&gt;&lt;end position=&quot;&quot;&gt;&lt;/end&gt;&lt;/start&gt;

&lt;p&gt;例如 0y$ 命令意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;0 → 先到行头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;y → 从这里开始拷贝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$ → 拷贝到本行最后一个字符&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可可以输入 ye，从当前位置拷贝到本单词的最后一个字符。&lt;/p&gt;
&lt;p&gt;你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。&lt;/p&gt;
&lt;p&gt;还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;d (删除 )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;v (可视化的选择)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gU (变大写)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gu (变小写)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;等等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;第四级-–-Vim-超能力&quot;&gt;&lt;a href=&quot;#第四级-–-Vim-超能力&quot; class=&quot;headerlink&quot; title=&quot;第四级 – Vim 超能力&quot;&gt;&lt;/a&gt;第四级 – Vim 超能力&lt;/h3&gt;&lt;p&gt;你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。&lt;/p&gt;
&lt;p&gt;在当前行上移动光标: 0 ^ $ f F t T , ;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;0 → 到行头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;^ → 到本行的第一个非blank字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$ → 到行尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;g_ → 到本行最后一个不是blank字符的位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t, → 到逗号前的第一个字符。逗号可以变成其它字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3fa → 在当前行查找第三个出现的a。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;F 和 T → 和 f 和 t 一样，只不过是相反方向。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/img/201403/30213311_S4ef.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;还有一个很有用的命令是 dt” → 删除所有的内容，直到遇到双引号—— “。&lt;/p&gt;
&lt;h4 id=&quot;区域选择-amp-lt-action-amp-gt-a-amp-lt-object-amp-gt-或-amp-lt-action-amp-gt-i-amp-lt-object-amp-gt&quot;&gt;&lt;a href=&quot;#区域选择-amp-lt-action-amp-gt-a-amp-lt-object-amp-gt-或-amp-lt-action-amp-gt-i-amp-lt-object-amp-gt&quot; class=&quot;headerlink&quot; title=&quot;区域选择 &amp;amp;lt;action&amp;amp;gt;a&amp;amp;lt;object&amp;amp;gt; 或 &amp;amp;lt;action&amp;amp;gt;i&amp;amp;lt;object&amp;amp;gt;&quot;&gt;&lt;/a&gt;区域选择 &lt;code&gt;&amp;amp;lt;action&amp;amp;gt;a&amp;amp;lt;object&amp;amp;gt; 或 &amp;amp;lt;action&amp;amp;gt;i&amp;amp;lt;object&amp;amp;gt;&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;在visual 模式下，这些命令很强大，其命令格式为&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;lt;action&amp;amp;gt;a&amp;amp;lt;object&amp;amp;gt; 和 &amp;amp;lt;action&amp;amp;gt;i&amp;amp;lt;object&amp;amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;action可以是任何的命令，如 d (删除), y (拷贝), v (可以视模式选择)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;object 可能是： w 一个单词， W 一个以空格为分隔的单词， s 一个句字， p 一个段落。也可以是一个特别的字符：”、 ‘、 )、 }、 ]。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设你有一个字符串 (map (+) (“foo”)).而光标键在第一个 o 的位置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;vi” → 会选择 foo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;va” → 会选择 “foo”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;vi) → 会选择 “foo”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;va) → 会选择(“foo”).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;v2i) → 会选择 map (+) (“foo”)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;v2a) → 会选择 (map (+) (“foo”))&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/img/201403/30213319_fpAj.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;块操作-amp-lt-C-v-amp-gt&quot;&gt;&lt;a href=&quot;#块操作-amp-lt-C-v-amp-gt&quot; class=&quot;headerlink&quot; title=&quot;块操作: &amp;amp;lt;C-v&amp;amp;gt;&quot;&gt;&lt;/a&gt;块操作: &lt;code&gt;&amp;amp;lt;C-v&amp;amp;gt;&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;块操作，典型的操作： &lt;code&gt;0 &amp;amp;lt;C-v&amp;amp;gt; &amp;amp;lt;C-d&amp;amp;gt; I-- [ESC]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;^ → 到行头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;lt;C-v&amp;amp;gt;&lt;/code&gt; → 开始块操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;lt;C-d&amp;amp;gt;&lt;/code&gt; → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)&lt;/li&gt;
&lt;li&gt;I– [ESC] → I是插入，插入“–”，按ESC键来为每一行生效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/img/201403/30213319_eOK2.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在Windows下的vim，你需要使用 &lt;code&gt;&amp;amp;lt;C-q&amp;amp;gt;&lt;/code&gt; 而不是 &lt;code&gt;&amp;amp;lt;C-v&amp;amp;gt;&lt;/code&gt; ，&lt;code&gt;&amp;amp;lt;C-v&amp;amp;gt;&lt;/code&gt; 是拷贝剪贴板。&lt;/p&gt;
&lt;h4 id=&quot;自动提示：-amp-lt-C-n-amp-gt-和-amp-lt-C-p-amp-gt&quot;&gt;&lt;a href=&quot;#自动提示：-amp-lt-C-n-amp-gt-和-amp-lt-C-p-amp-gt&quot; class=&quot;headerlink&quot; title=&quot;自动提示： &amp;amp;lt;C-n&amp;amp;gt; 和 &amp;amp;lt;C-p&amp;amp;gt;&quot;&gt;&lt;/a&gt;自动提示： &lt;code&gt;&amp;amp;lt;C-n&amp;amp;gt; 和 &amp;amp;lt;C-p&amp;amp;gt;&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;在 Insert 模式下，你可以输入一个词的开头，然后按 &lt;code&gt;&amp;amp;lt;C-p&amp;amp;gt;或是&amp;amp;lt;C-n&amp;amp;gt;&lt;/code&gt;，自动补齐功能就出现了……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/img/201403/30213320_pPoI.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;宏录制：-qa-操作序列-q-a&quot;&gt;&lt;a href=&quot;#宏录制：-qa-操作序列-q-a&quot; class=&quot;headerlink&quot; title=&quot;宏录制： qa 操作序列 q, @a , @@&quot;&gt;&lt;/a&gt;宏录制： qa 操作序列 q, @a , @@&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;qa 把你的操作记录在寄存器 a。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;于是 @a  会replay被录制的宏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@@ 是一个快捷键用来replay最新录制的宏。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;示例&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一个只有一行且这一行只有“1”的文本中，键入如下命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;qaYp&lt;c-a&gt;q→&lt;/c-a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   qa 开始录制

*   Yp 复制行.

*   `&amp;amp;lt;C-a&amp;amp;gt;` 增加1.

*   q 停止录制.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@a  → 在1下面写下 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@@ → 在2 正面写下3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现在做 100@@ 会创建新的100行，并把数据增加到 103.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/img/201403/30213321_axRo.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;可视化选择：-v-V-amp-lt-C-v-amp-gt&quot;&gt;&lt;a href=&quot;#可视化选择：-v-V-amp-lt-C-v-amp-gt&quot; class=&quot;headerlink&quot; title=&quot;可视化选择： v,V,&amp;amp;lt;C-v&amp;amp;gt;&quot;&gt;&lt;/a&gt;可视化选择： v,V,&lt;code&gt;&amp;amp;lt;C-v&amp;amp;gt;&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;前面，我们看到了 &lt;code&gt;&amp;amp;lt;C-v&amp;amp;gt;&lt;/code&gt;的示例 （在Windows下应该是&lt;code&gt;&amp;amp;lt;C-q&amp;amp;gt;&lt;/code&gt;），我们可以使用 v 和 V。一但被选好了，你可以做下面的事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;J → 把所有的行连接起来（变成一行）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;lt; 或 &amp;gt; → 左右缩进&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;= → 自动给缩进&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/img/201403/30213324_dgd1.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在所有被选择的行后加上点东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;amp;lt;C-v&amp;amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选中相关的行 (可使用 j 或 &lt;code&gt;&amp;amp;lt;C-d&amp;amp;gt;&lt;/code&gt; 或是 /pattern 或是 % 等……)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$ 到行最后&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A, 输入字符串，按 ESC。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/img/201403/30213326_mQtz.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;分屏-split-和-vsplit&quot;&gt;&lt;a href=&quot;#分屏-split-和-vsplit&quot; class=&quot;headerlink&quot; title=&quot;分屏: :split 和 vsplit.&quot;&gt;&lt;/a&gt;分屏: :split 和 vsplit.&lt;/h4&gt;&lt;p&gt;下面是主要的命令，你可以使用VIM的帮助 :help split. 你可以参考本站以前的一篇文章VIM分屏。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;:split → 创建分屏 (:vsplit创建垂直分屏)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;amp;lt;C-w&amp;amp;gt;&amp;amp;lt;dir&amp;amp;gt;&lt;/code&gt; : dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来切换分屏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;amp;lt;C-w&amp;amp;gt;_&lt;/code&gt; (或 &lt;code&gt;&amp;amp;lt;C-w&amp;amp;gt;|&lt;/code&gt;) : 最大化尺寸 (&lt;code&gt;&amp;amp;lt;C-w&amp;amp;gt;|&lt;/code&gt; 垂直分屏)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;amp;lt;C-w&amp;amp;gt;+&lt;/code&gt; (或 &lt;code&gt;&amp;amp;lt;C-w&amp;amp;gt;-&lt;/code&gt;) : 增加尺寸&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://static.oschina.net/uploads/img/201403/30213328_ANuy.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;http://my.oschina.net/u/1455799/blog/214448?fromerr=oMXPHQ26&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.oschina.
    
    </summary>
    
    
      <category term="Vim" scheme="http://gcblog.cn/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>BCD码</title>
    <link href="http://gcblog.cn/2015/12/28/BCD%E7%A0%81/"/>
    <id>http://gcblog.cn/2015/12/28/BCD码/</id>
    <published>2015-12-28T15:17:30.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;BCD码（Binary-Coded Decimal‎）亦称二进码十进数或二-十进制代码。用4位二进制数来表示1位十进制数中的0~9这10个数码。是一种二进制的数字编码形式，用二进制编码的十进制代码。BCD码这种编码形式利用了四个位元来储存一个十进制的数码，使二进制和十进制之间的转换得以快捷的进行。这种编码技巧最常用于会计系统的设计里，因为会计制度经常需要对很长的数字串作准确的计算。相对于一般的浮点式记数法，采用BCD码，既可保存数值的精确度，又可免去使电脑作浮点运算时所耗费的时间。此外，对于其他需要高精确度的计算，BCD编码亦很常用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BCD码可分为有权码和无权码两类：有权BCD码有8421码、2421码、5421码，其中8421码是最常用的；无权BCD码有余3码，余3循环码等。&lt;/p&gt;
&lt;p&gt;最常用的BCD编码，就是使用”0”至”9”这十个数值的二进码来表示。这种编码方式，在称之为“8421码”（日常所说的BCD码大都是指8421BCD码形式）。&lt;/p&gt;
&lt;p&gt;附注：压缩BCD码与非压缩BCD码的区别—— 压缩BCD码的每一位用4位二进制表示，一个字节表示两位十进制数。例如10010110B表示十进制数96D；非压缩BCD码用1个字节表示一位十进制数，高四位总是0000，低4位的0000~1001表示0~9.例如00001000B表示十进制数8.&lt;/p&gt;
&lt;h4 id=&quot;BCD码的运算法则&quot;&gt;&lt;a href=&quot;#BCD码的运算法则&quot; class=&quot;headerlink&quot; title=&quot;BCD码的运算法则&quot;&gt;&lt;/a&gt;BCD码的运算法则&lt;/h4&gt;&lt;p&gt;BCD码的运算规则：BCD码是十进制数，而运算器对数据做加减运算时，都是按二进制运算规则进行处理的。这样，当将 BCD码传送给运算器进行运算时，其结果需要修正。修正的规则是：当两个BCD码相加，如果和等于或小于 1001(即十进制数9)，不需要修正；如果相加之和在 1010 到1111(即十六进制数 0AH～0FH)之间，则需加 6 进行修正；如果相加时，本位产生了进位，也需加 6 进行修正。这样做的原因是，机器按二进制相加，所以 4 位二进制数相加时，是按“逢十六进一”的原则进行运算的，而实质上是 2 个十进制数相加，应该按“逢十进一”的原则相加，16 与10相差 6，所以当和超过 9或有进位时，都要加 6 进行修正。下面举例说明。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;计算 5+8；&lt;/p&gt;
&lt;p&gt;将 5 和 8 以 8421 BCD输入机器，则运算如下：&lt;/p&gt;
&lt;p&gt;0 1 0 1&lt;/p&gt;
&lt;p&gt;+) 1 0 0 0&lt;/p&gt;
&lt;p&gt;1 1 0 1 结果大于 9&lt;/p&gt;
&lt;p&gt;+) 0 1 1 0 加 6 修正&lt;/p&gt;
&lt;p&gt;1 0 0 1 1 即13 的 BCD码&lt;/p&gt;
&lt;p&gt;结果是 0011，即十进制数3，还产生了进位。5+8=13，结论正确。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算 8+8&lt;/p&gt;
&lt;p&gt; 将8以8421 BCD输入机器，则运算如下：&lt;/p&gt;
&lt;p&gt; 1 0 0 0&lt;/p&gt;
&lt;p&gt; +）1 0 0 0&lt;/p&gt;
&lt;p&gt; 1 0 0 0 0 结果大于9&lt;/p&gt;
&lt;p&gt; +）0 1 1 0 加6修正&lt;/p&gt;
&lt;p&gt; 1 0 1 1 0 16的BCD码&lt;/p&gt;
&lt;p&gt; 结果是0110，即十进制的6，而且产生进位。8+8=16，结论正确。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Java-BCD方法&quot;&gt;&lt;a href=&quot;#Java-BCD方法&quot; class=&quot;headerlink&quot; title=&quot;Java BCD方法&quot;&gt;&lt;/a&gt;Java BCD方法&lt;/h4&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/&lt;strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;em&gt; Created by chrisgong on 15/12/28.&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; BCDUtils &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;em&gt; @功能: BCD码转为10进制串(阿拉伯数据)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @参数: BCD码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;em&gt; @结果: 10进制串&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;bcd2Str&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(byte[] bytes)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuffer temp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuffer(bytes.length &lt;em&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            temp.append((byte) ((bytes[i] &amp;amp; &lt;span class=&quot;number&quot;&gt;0xf0&lt;/span&gt;) &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            temp.append((byte) (bytes[i] &amp;amp; &lt;span class=&quot;number&quot;&gt;0x0f&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; temp.toString().substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).equalsIgnoreCase(&lt;span class=&quot;string&quot;&gt;“0”&lt;/span&gt;) ? temp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .toString().substring(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) : temp.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @功能: 10进制串转为BCD码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;em&gt; @参数: 10进制串&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @结果: BCD码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;em&gt;/&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; byte[] str2Bcd(String asc) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = asc.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mod = len % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mod != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            asc = &lt;span class=&quot;string&quot;&gt;“0”&lt;/span&gt; + asc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            len = asc.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        byte abt[] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; byte[len];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (len &amp;gt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            len = len / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        byte bbt[] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; byte[len];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        abt = asc.getBytes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j, k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; p &amp;lt; asc.length() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; p++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  p] &amp;gt;= &lt;span class=&quot;string&quot;&gt;‘0’&lt;/span&gt;) &amp;amp;&amp;amp; (abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;em&gt; p] &amp;lt;= &lt;span class=&quot;string&quot;&gt;‘9’&lt;/span&gt;)) &amp;#123;&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                j = abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  p] - &lt;span class=&quot;string&quot;&gt;‘0’&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;em&gt; p] &amp;gt;= &lt;span class=&quot;string&quot;&gt;‘a’&lt;/span&gt;) &amp;amp;&amp;amp; (abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;/em&gt; p] &amp;lt;= &lt;span class=&quot;string&quot;&gt;‘z’&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                j = abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;em&gt; p] - &lt;span class=&quot;string&quot;&gt;‘a’&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0x0a&lt;/span&gt;;&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                j = abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  p] - &lt;span class=&quot;string&quot;&gt;‘A’&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0x0a&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;em&gt; p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;gt;= &lt;span class=&quot;string&quot;&gt;‘0’&lt;/span&gt;) &amp;amp;&amp;amp; (abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;/em&gt; p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;lt;= &lt;span class=&quot;string&quot;&gt;‘9’&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                k = abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;em&gt; p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;string&quot;&gt;‘0’&lt;/span&gt;;&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;gt;= &lt;span class=&quot;string&quot;&gt;‘a’&lt;/span&gt;) &amp;amp;&amp;amp; (abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;em&gt; p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;lt;= &lt;span class=&quot;string&quot;&gt;‘z’&lt;/span&gt;)) &amp;#123;&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                k = abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;  p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;string&quot;&gt;‘a’&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0x0a&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                k = abt[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * p + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;string&quot;&gt;‘A’&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0x0a&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = (j &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) + k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            byte b = (byte) a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bbt[p] = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bbt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;BCD码（Binary-Coded Decimal‎）亦称二进码十进数或二-十进制代码。用4位二进制数来表示1位十
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://gcblog.cn/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Dex Method Size 计算脚本</title>
    <link href="http://gcblog.cn/2015/12/27/Dex-Method-Size-%E8%AE%A1%E7%AE%97%E8%84%9A%E6%9C%AC/"/>
    <id>http://gcblog.cn/2015/12/27/Dex-Method-Size-计算脚本/</id>
    <published>2015-12-27T14:43:17.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;p&gt;The script：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;shebang&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SDK_DIR=&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# SDK dexdump路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;APK_DIR=&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 需要计算的APK地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;/./dexdump &lt;span class=&quot;operator&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt; | grep method_ids_size&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The results:&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  temp  .&lt;span class=&quot;regexp&quot;&gt;/dex_method.sh /&lt;/span&gt;Users&lt;span class=&quot;regexp&quot;&gt;/chrisgong/&lt;/span&gt;Library&lt;span class=&quot;regexp&quot;&gt;/Android/&lt;/span&gt;sdk&lt;span class=&quot;regexp&quot;&gt;/build-tools/&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;23.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;~/mac/&lt;/span&gt;git&lt;span class=&quot;regexp&quot;&gt;/cim-android/&lt;/span&gt;build&lt;span class=&quot;regexp&quot;&gt;/outputs/&lt;/span&gt;apk/cim-android-debug-v1&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;method_ids_size     :&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;40899&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;The script：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;shebang&quot;&gt;#!/bin/bash&lt;/spa
    
    </summary>
    
    
      <category term="Android" scheme="http://gcblog.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>gradle学习笔记 构建脚本概要</title>
    <link href="http://gcblog.cn/2015/12/19/gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9E%84%E5%BB%BA%E8%84%9A%E6%9C%AC%E6%A6%82%E8%A6%81/"/>
    <id>http://gcblog.cn/2015/12/19/gradle学习笔记-构建脚本概要/</id>
    <published>2015-12-19T04:57:39.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;构建块&quot;&gt;&lt;a href=&quot;#构建块&quot; class=&quot;headerlink&quot; title=&quot;构建块&quot;&gt;&lt;/a&gt;构建块&lt;/h3&gt;&lt;p&gt;一个gradle构建包含三个基本构建块：project、task、property。每个构建包含至少一个project，进而又包含一个或多个task。&lt;/p&gt;
&lt;h4 id=&quot;project&quot;&gt;&lt;a href=&quot;#project&quot; class=&quot;headerlink&quot; title=&quot;project&quot;&gt;&lt;/a&gt;project&lt;/h4&gt;&lt;h4 id=&quot;task&quot;&gt;&lt;a href=&quot;#task&quot; class=&quot;headerlink&quot; title=&quot;task&quot;&gt;&lt;/a&gt;task&lt;/h4&gt;&lt;h5 id=&quot;扩展属性&quot;&gt;&lt;a href=&quot;#扩展属性&quot; class=&quot;headerlink&quot; title=&quot;扩展属性&quot;&gt;&lt;/a&gt;扩展属性&lt;/h5&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;project&lt;/span&gt;.ext.myProp = &lt;span class=&quot;string&quot;&gt;‘myValue’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    someOtherProp = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert myProp == &lt;span class=&quot;string&quot;&gt;‘myValue’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;project&lt;/span&gt;.someOtherProp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ext.someOtherProp = &lt;span class=&quot;number&quot;&gt;567&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;Gradle属性&quot;&gt;&lt;a href=&quot;#Gradle属性&quot; class=&quot;headerlink&quot; title=&quot;Gradle属性&quot;&gt;&lt;/a&gt;Gradle属性&lt;/h5&gt;&lt;p&gt;通过再gradle.properties文件中声明直接添加到项目中，这个文件中声明的属性对所有的项目可用。&lt;/p&gt;
&lt;p&gt;gradle.properties&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;setting&quot;&gt;exampleProp = &lt;span class=&quot;value&quot;&gt;myValue&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;setting&quot;&gt;someOtherProp = &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;455&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;builde.gradle&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assert &lt;span class=&quot;keyword&quot;&gt;project&lt;/span&gt;.exampleProp == &lt;span class=&quot;string&quot;&gt;‘myValue’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; printGradleProperty &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“Second property: $someOtherProp”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle-properties &lt;span class=&quot;string&quot;&gt;git:&lt;/span&gt;(master) ✗ gradle pGP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:printGradleProperty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Second &lt;span class=&quot;string&quot;&gt;property:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;455&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BUILD SUCCESSFUL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total &lt;span class=&quot;string&quot;&gt;time:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.24&lt;/span&gt; secs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This build could be faster, please consider using the Gradle &lt;span class=&quot;string&quot;&gt;Daemon:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//docs.gradle.org/2.9/userguide/gradle_daemon.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;声明属性的其他方式&quot;&gt;&lt;a href=&quot;#声明属性的其他方式&quot; class=&quot;headerlink&quot; title=&quot;声明属性的其他方式&quot;&gt;&lt;/a&gt;声明属性的其他方式&lt;/h5&gt;&lt;p&gt;前面两种方式，大多用来声明自定义变量及值。Gradle也提供了很多其他方式为构建提供属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目属性 -P&lt;/li&gt;
&lt;li&gt;系统属性 -D&lt;/li&gt;
&lt;li&gt;环境属性 按此模式提供 ORG_GRADLE_PROJECT_propertyName=someValue&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构建块&quot;&gt;&lt;a href=&quot;#构建块&quot; class=&quot;headerlink&quot; title=&quot;构建块&quot;&gt;&lt;/a&gt;构建块&lt;/h3&gt;&lt;p&gt;一个gradle构建包含三个基本构建块：project、task、property。每个构建包含至少一个project，进而又包含一
    
    </summary>
    
    
      <category term="gradle" scheme="http://gcblog.cn/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Logger - Android日志输出库</title>
    <link href="http://gcblog.cn/2015/12/19/Logger-Android%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E5%BA%93/"/>
    <id>http://gcblog.cn/2015/12/19/Logger-Android日志输出库/</id>
    <published>2015-12-19T04:55:15.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Logger&quot;&gt;&lt;a href=&quot;#Logger&quot; class=&quot;headerlink&quot; title=&quot;Logger&quot;&gt;&lt;/a&gt;Logger&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;原文地址： &lt;a href=&quot;https://github.com/orhanobut/logger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/orhanobut/logger&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;Simple, pretty and powerful logger for android&lt;/p&gt;
&lt;p&gt;Logger provides :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread information&lt;/li&gt;
&lt;li&gt;Class information&lt;/li&gt;
&lt;li&gt;Method information&lt;/li&gt;
&lt;li&gt;Pretty-print for json content&lt;/li&gt;
&lt;li&gt;Pretty-print for new line “\n”&lt;/li&gt;
&lt;li&gt;Clean output&lt;/li&gt;
&lt;li&gt;Jump to source&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖&quot;&gt;&lt;/a&gt;依赖&lt;/h4&gt;&lt;p&gt;gradle 导入&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;repositories&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// …&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  maven &amp;#123; url &lt;span class=&quot;string&quot;&gt;“&lt;a href=&quot;https://jitpack.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://jitpack.io&lt;/a&gt;“&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dependencies&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘com.github.orhanobut:logger:1.12’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;h5 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h5&gt;&lt;p&gt;&lt;em&gt;在程序初始化时候实现以下代码（Application，或者LAUNCHER Activity中）&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Logger&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .init(&lt;span class=&quot;type&quot;&gt;YOUR_TAG&lt;/span&gt;)                 // &lt;span class=&quot;default&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;PRETTYLOGGER&lt;/span&gt; or use just init&lt;span class=&quot;container&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .methodCount(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)                 // &lt;span class=&quot;default&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .hideThreadInfo()               // &lt;span class=&quot;default&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; shown&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .logLevel(&lt;span class=&quot;type&quot;&gt;LogLevel&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;NONE&lt;/span&gt;)        // &lt;span class=&quot;default&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;LogLevel&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;FULL&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .methodOffset(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)                // &lt;span class=&quot;default&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .logTool(new &lt;span class=&quot;type&quot;&gt;AndroidLogTool&lt;/span&gt;()); // custom log tool, optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;支持格式&quot;&gt;&lt;a href=&quot;#支持格式&quot; class=&quot;headerlink&quot; title=&quot;支持格式&quot;&gt;&lt;/a&gt;支持格式&lt;/h5&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Logger.&lt;span class=&quot;literal&quot;&gt;d&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“hello”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Logger.&lt;span class=&quot;literal&quot;&gt;e&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“hello”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Logger.&lt;span class=&quot;literal&quot;&gt;w&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“hello”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Logger.v(&lt;span class=&quot;string&quot;&gt;“hello”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Logger.wtf(&lt;span class=&quot;string&quot;&gt;“hello”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Logger.json(JSON_CONTENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Logger.xml(XML_CONTENT);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;举个栗子&quot;&gt;&lt;a href=&quot;#举个栗子&quot; class=&quot;headerlink&quot; title=&quot;举个栗子&quot;&gt;&lt;/a&gt;举个栗子&lt;/h5&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Logger.&lt;span class=&quot;literal&quot;&gt;d&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“hello”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Logger.&lt;span class=&quot;literal&quot;&gt;e&lt;/span&gt;(exception, &lt;span class=&quot;string&quot;&gt;“message”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Logger.json(JSON_CONTENT);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/orhanobut/logger/master/images/logger-log.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Logger&quot;&gt;&lt;a href=&quot;#Logger&quot; class=&quot;headerlink&quot; title=&quot;Logger&quot;&gt;&lt;/a&gt;Logger&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;原文地址： &lt;a href=&quot;https://github.com/orhanob
    
    </summary>
    
    
      <category term="Android" scheme="http://gcblog.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>gradle学习笔记 - 命令行、守护进程、包装器</title>
    <link href="http://gcblog.cn/2015/12/10/gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%91%BD%E4%BB%A4%E8%A1%8C%E3%80%81%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E3%80%81%E5%8C%85%E8%A3%85%E5%99%A8/"/>
    <id>http://gcblog.cn/2015/12/10/gradle学习笔记-命令行、守护进程、包装器/</id>
    <published>2015-12-10T14:56:36.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Gradle命令行使用&quot;&gt;&lt;a href=&quot;#Gradle命令行使用&quot; class=&quot;headerlink&quot; title=&quot;Gradle命令行使用&quot;&gt;&lt;/a&gt;Gradle命令行使用&lt;/h3&gt;&lt;p&gt;列出所有可用的tasks&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gradle -&lt;span class=&quot;tag&quot;&gt;q&lt;/span&gt; tasks&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;需要更多task信息，使用–all选项&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gradle -&lt;span class=&quot;tag&quot;&gt;q&lt;/span&gt; tasks -all&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;gradle能够以驼峰式的缩写再命令行上运行任务(任务名字的缩写必须是唯一的)&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; startSession &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    chant()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; chant() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ant&lt;/span&gt;.echo(message: &lt;span class=&quot;string&quot;&gt;‘Repeat after me…’&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;times&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“yayGradle$it”&lt;/span&gt; &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Gradle rocks’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yayGradle0.dependsOn startSession&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yayGradle2.dependsOn yayGradle1, yayGradle0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; groupTerapy(dependsOn: yayGradle2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle gT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:startSession&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;symbol&quot;&gt;ant:&lt;/span&gt;echo] &lt;span class=&quot;constant&quot;&gt;Repeat &lt;/span&gt;after me…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:yayGradle0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Gradle &lt;/span&gt;rocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:yayGradle1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Gradle &lt;/span&gt;rocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:yayGradle2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Gradle &lt;/span&gt;rocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:groupTerapy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;BUILD SUCCESSFUL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Total &lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;time:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.474&lt;/span&gt; secs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;This &lt;/span&gt;build could be faster, please consider using the &lt;span class=&quot;constant&quot;&gt;Gradle Daemon:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/docs.gradle.org/&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2.9&lt;/span&gt;/userguide/gradle_daemon.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;执行时排除某个一个任务(-x)&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle &lt;span class=&quot;variable&quot;&gt;gT&lt;/span&gt; -x yayGradle0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:yayGradle1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Gradle rocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:yayGradle2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Gradle rocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:groupTerapy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BUILD SUCCESSFUL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1.28&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;secs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This build could be faster, please consider &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;the&lt;/span&gt; Gradle Daemon: &lt;span class=&quot;keyword&quot;&gt;https&lt;/span&gt;://docs.gradle.org/&lt;span class=&quot;number&quot;&gt;2.9&lt;/span&gt;/userguide/gradle_daemon.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;命令行选项&quot;&gt;&lt;a href=&quot;#命令行选项&quot; class=&quot;headerlink&quot; title=&quot;命令行选项&quot;&gt;&lt;/a&gt;命令行选项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;-?,h,–help 打印出所有可用的命令行选项&lt;/li&gt;
&lt;li&gt;-b,–build-file Gradle构建脚本的默认命名月设定是buidle.gradle。使用这个命令行选项可以执行一个特定名字的构建脚本（ex：gradle -b test.gradle）&lt;/li&gt;
&lt;li&gt;–offline 通常构建中声明的依赖必须在离线仓库中存在才可用，如果这些依赖在本地缓存中没有，那么运行在一个没有网络的环境中的构建都会失败。使用这个选项可以让你以离线模式运行构建，仅仅在本地缓存中检查依赖是否存在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参数选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-D,–system-prop gradle是以一个JVM进程运行的。和所有java进程一样，你可以提供一个系统参数，就像-Dmyprop=myvalue一样&lt;/li&gt;
&lt;li&gt;-P,–project-prop 项目参数是构建脚本中可用的变量，你可以使用这个选项直接向构建脚本中传入参数（ex：-Pmyprop=myvalue）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日志选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i,–info 构建发生了什么的详细日志&lt;/li&gt;
&lt;li&gt;-s,–statcktrace 在有异常抛出时会打印出简单的堆栈跟踪信息&lt;/li&gt;
&lt;li&gt;-q,–quiet 减少构建出错时打印出来的错误日志信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;帮助任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tasks 显示项目中所有可以运行的task，包括他们的描述信息&lt;/li&gt;
&lt;li&gt;properties 显示项目中所有可用的属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;守护进程&quot;&gt;&lt;a href=&quot;#守护进程&quot; class=&quot;headerlink&quot; title=&quot;守护进程&quot;&gt;&lt;/a&gt;守护进程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;–daemon 运行任务时加上即会开启守护进程&lt;/li&gt;
&lt;li&gt;–no-daemon 不运行在守护进程内&lt;/li&gt;
&lt;li&gt;–stop 停止守护进程&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle gT –stop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stopping &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;daemon&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Gradle daemon stopped.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle gT –daemon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Starting &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; new Gradle Daemon &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; this build (subsequent builds will be faster).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:startSession&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ant:echo] Repeat after me…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:yayGradle0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Gradle rocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:yayGradle1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Gradle rocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:yayGradle2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Gradle rocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:groupTerapy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BUILD SUCCESSFUL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total &lt;span class=&quot;tag&quot;&gt;time&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2.152&lt;/span&gt; secs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;定义仓库&quot;&gt;&lt;a href=&quot;#定义仓库&quot; class=&quot;headerlink&quot; title=&quot;定义仓库&quot;&gt;&lt;/a&gt;定义仓库&lt;/h3&gt;&lt;figure class=&quot;highlight mathematica&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;respositories&lt;span class=&quot;list&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;定义依赖&quot;&gt;&lt;a href=&quot;#定义依赖&quot; class=&quot;headerlink&quot; title=&quot;定义依赖&quot;&gt;&lt;/a&gt;定义依赖&lt;/h3&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    complie &lt;span class=&quot;string&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘org.apache.commons’&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘commons-lang3’&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘3.1’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Gradle包装器&quot;&gt;&lt;a href=&quot;#Gradle包装器&quot; class=&quot;headerlink&quot; title=&quot;Gradle包装器&quot;&gt;&lt;/a&gt;Gradle包装器&lt;/h3&gt;&lt;p&gt;能够让机器在没有安装Gradle运行环境的情况下通过中央仓库下载一个指定的Gradle版本运行构建。（独立于系统，系统配置和Gradle版本的可靠和可重复的构建）&lt;/p&gt;
&lt;h4 id=&quot;配置包装器&quot;&gt;&lt;a href=&quot;#配置包装器&quot; class=&quot;headerlink&quot; title=&quot;配置包装器&quot;&gt;&lt;/a&gt;配置包装器&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建包装器任务&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;task&lt;/span&gt; wrapper(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Wrapper&lt;/span&gt;) &lt;span class=&quot;container&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gradleVersion = ‘1.2’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行任务&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  todo-webapp-wrapper &lt;span class=&quot;string&quot;&gt;git:&lt;/span&gt;(master) ✗ gradle wrapper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:wrapper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BUILD SUCCESSFUL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total &lt;span class=&quot;string&quot;&gt;time:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2.043&lt;/span&gt; secs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This build could be faster, please consider using the Gradle &lt;span class=&quot;string&quot;&gt;Daemon:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//docs.gradle.org/2.9/userguide/gradle_daemon.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;定制包装器&quot;&gt;&lt;a href=&quot;#定制包装器&quot; class=&quot;headerlink&quot; title=&quot;定制包装器&quot;&gt;&lt;/a&gt;定制包装器&lt;/h4&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task wrapper(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Wrapper&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gradleVersion = &lt;span class=&quot;symbol&quot;&gt;‘2&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.8&lt;/span&gt;‘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取gradle包装器url&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    distributionUrl = &lt;span class=&quot;symbol&quot;&gt;‘https&lt;/span&gt;:&lt;span class=&quot;comment&quot;&gt;//services.gradle.org/distributions/gradle-2.8-bin.zip’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//包装器解压后存放相对路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    distributionPath = &lt;span class=&quot;symbol&quot;&gt;‘gradle&lt;/span&gt;-dists’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Gradle命令行使用&quot;&gt;&lt;a href=&quot;#Gradle命令行使用&quot; class=&quot;headerlink&quot; title=&quot;Gradle命令行使用&quot;&gt;&lt;/a&gt;Gradle命令行使用&lt;/h3&gt;&lt;p&gt;列出所有可用的tasks&lt;/p&gt;
&lt;figure class=&quot;hi
    
    </summary>
    
    
      <category term="gradle" scheme="http://gcblog.cn/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>gradle学习笔记 - Task</title>
    <link href="http://gcblog.cn/2015/12/02/gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Task/"/>
    <id>http://gcblog.cn/2015/12/02/gradle学习笔记-Task/</id>
    <published>2015-12-02T14:19:39.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;构建脚本&quot;&gt;&lt;a href=&quot;#构建脚本&quot; class=&quot;headerlink&quot; title=&quot;构建脚本&quot;&gt;&lt;/a&gt;构建脚本&lt;/h3&gt;&lt;p&gt;task：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; hello &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;doLast&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Hello world!’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;闭包写法：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; hello &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Hello world!’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;p&gt;构建脚本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用Groovy语言&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; upper &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String someString = &lt;span class=&quot;string&quot;&gt;‘mY_nAmE’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“Original: “&lt;/span&gt; + someString &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“Upper case: “&lt;/span&gt; + someString.toUpperCase()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt; &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;times&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“$it “&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;任务依赖&quot;&gt;&lt;a href=&quot;#任务依赖&quot; class=&quot;headerlink&quot; title=&quot;任务依赖&quot;&gt;&lt;/a&gt;任务依赖&lt;/h3&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; hello &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Hello world!’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; intro(dependsOn: hello) &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“I’m Gradle”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q intro&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello world!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I&lt;span class=&quot;string&quot;&gt;‘m Gradle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Lazy dependsOn - the other task does not exist (yet)&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; taskX(dependsOn: &lt;span class=&quot;string&quot;&gt;‘taskY’&lt;/span&gt;) &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘taskX’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; taskY &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘taskY’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;动态任务&quot;&gt;&lt;a href=&quot;#动态任务&quot; class=&quot;headerlink&quot; title=&quot;动态任务&quot;&gt;&lt;/a&gt;动态任务&lt;/h3&gt;&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;times&lt;/span&gt; &amp;#123; counter -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    task &lt;span class=&quot;string&quot;&gt;“task&lt;span class=&quot;variable&quot;&gt;$counter&lt;/span&gt;“&lt;/span&gt; &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        println &lt;span class=&quot;string&quot;&gt;“I’m task number &lt;span class=&quot;variable&quot;&gt;$counter&lt;/span&gt;“&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -&lt;span class=&quot;keyword&quot;&gt;q&lt;/span&gt; task1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I&lt;span class=&quot;string&quot;&gt;‘m task number 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q task2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I’&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; task number &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -&lt;span class=&quot;keyword&quot;&gt;q&lt;/span&gt; task3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I&lt;span class=&quot;string&quot;&gt;‘m task number 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q task4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FAILURE: Build failed with an exception.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;使用已存在任务&quot;&gt;&lt;a href=&quot;#使用已存在任务&quot; class=&quot;headerlink&quot; title=&quot;使用已存在任务&quot;&gt;&lt;/a&gt;使用已存在任务&lt;/h3&gt;&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;times&lt;/span&gt; &amp;#123; counter -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    task &lt;span class=&quot;string&quot;&gt;“task&lt;span class=&quot;variable&quot;&gt;$counter&lt;/span&gt;“&lt;/span&gt; &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        println &lt;span class=&quot;string&quot;&gt;“I’m task number &lt;span class=&quot;variable&quot;&gt;$counter&lt;/span&gt;“&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.dependsOn task2, task3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -&lt;span class=&quot;keyword&quot;&gt;q&lt;/span&gt; task&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I&lt;span class=&quot;string&quot;&gt;‘m task number 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I’&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; task number &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I&lt;span class=&quot;string&quot;&gt;‘m task number 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Accessing a task via API - adding behaviour&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; hello &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Hello Earth’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello.&lt;span class=&quot;keyword&quot;&gt;doFirst&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Hello Venus’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello.&lt;span class=&quot;keyword&quot;&gt;doLast&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Hello Mars’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Hello Jupiter’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Venus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Earth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Mars&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Jupiter&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;The calls doFirst and doLast can be executed multiple times. They add an action to the beginning or the end of the task’s actions list. When the task executes, the actions in the action list are executed in order. The &amp;lt;&amp;lt; operator is simply an alias for doLast.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;缩写&quot;&gt;&lt;a href=&quot;#缩写&quot; class=&quot;headerlink&quot; title=&quot;缩写&quot;&gt;&lt;/a&gt;缩写&lt;/h3&gt;&lt;p&gt;使用属性来访问方法&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; hello &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Hello world!’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello.&lt;span class=&quot;keyword&quot;&gt;doLast&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“Greetings from the $hello.name task.”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello world!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Greetings &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; the hello &lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;扩展属性&quot;&gt;&lt;a href=&quot;#扩展属性&quot; class=&quot;headerlink&quot; title=&quot;扩展属性&quot;&gt;&lt;/a&gt;扩展属性&lt;/h3&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; myTask &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ext.myProperty = &lt;span class=&quot;string&quot;&gt;“myValue”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; printTaskProperties &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; myTask.myProperty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q printTaskProperties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myValue&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;使用Ant任务&quot;&gt;&lt;a href=&quot;#使用Ant任务&quot; class=&quot;headerlink&quot; title=&quot;使用Ant任务&quot;&gt;&lt;/a&gt;使用Ant任务&lt;/h3&gt;&lt;p&gt;遍历文件夹并打印文件名和属性&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task loadfile &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def &lt;span class=&quot;built_in&quot;&gt;files&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;‘t’&lt;/span&gt;).listFiles().&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;files&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;each&lt;/span&gt; &amp;#123; File &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;.isFile()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ant.loadfile(srcFile: &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;, property: &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            println &lt;span class=&quot;string&quot;&gt;“ &lt;strong&gt;&lt;em&gt; $file.name &lt;/em&gt;&lt;/strong&gt;“&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            println &lt;span class=&quot;string&quot;&gt;“$&amp;#123;ant.properties[file.name]&amp;#125;”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  mkdir t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  touch &lt;span class=&quot;keyword&quot;&gt;text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  vim t/&lt;span class=&quot;keyword&quot;&gt;text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q loadfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;strong&gt;&lt;em&gt; &lt;span class=&quot;keyword&quot;&gt;text&lt;/span&gt; &lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Using AntBuilder &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; execute ant.loadfile target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;checksum&lt;/span&gt; &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fileList(&lt;span class=&quot;string&quot;&gt;‘../antLoadfileResources’&lt;/span&gt;).&lt;span class=&quot;keyword&quot;&gt;each&lt;/span&gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ant.&lt;span class=&quot;keyword&quot;&gt;checksum&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;, property: &lt;span class=&quot;string&quot;&gt;“cs&lt;em&gt;$file.name”&lt;/em&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        println &lt;span class=&quot;string&quot;&gt;“$file.name Checksum: $&amp;#123;ant.properties[“&lt;/span&gt;cs$&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;“]&amp;#125;”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task loadfile &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fileList(&lt;span class=&quot;string&quot;&gt;‘../antLoadfileResources’&lt;/span&gt;).&lt;span class=&quot;keyword&quot;&gt;each&lt;/span&gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ant.loadfile(srcFile: &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;, property: &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        println &lt;span class=&quot;string&quot;&gt;“I’m fond of $file.name”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt;[] fileList(&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; dir) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;(dir).listFiles(&amp;#123;&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;.isFile() &amp;#125; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; FileFilter).&lt;span class=&quot;keyword&quot;&gt;sort&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q loadfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;‘m fond of ab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I’&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; fond &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q &lt;span class=&quot;keyword&quot;&gt;checksum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ab &lt;span class=&quot;keyword&quot;&gt;Checksum&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;03862&lt;/span&gt;a037618f9566ac4d6cbdb5dd075&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Checksum&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;865943&lt;/span&gt;c62f297e63f6a381350c9dc0e1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;默认任务&quot;&gt;&lt;a href=&quot;#默认任务&quot; class=&quot;headerlink&quot; title=&quot;默认任务&quot;&gt;&lt;/a&gt;默认任务&lt;/h3&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defaultTasks &lt;span class=&quot;string&quot;&gt;‘clean’&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;‘run’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; clean &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Default Cleaning!’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; run &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Default Running!’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; other &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“I’m not a default task!”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; Cleaning!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; Running!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;配置DAG&quot;&gt;&lt;a href=&quot;#配置DAG&quot; class=&quot;headerlink&quot; title=&quot;配置DAG&quot;&gt;&lt;/a&gt;配置DAG&lt;/h3&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task distribution &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;“We build the zip with version=$version”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task release(dependsOn: &lt;span class=&quot;string&quot;&gt;‘distribution’&lt;/span&gt;) &amp;lt;&amp;lt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;‘We release now’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gradle.taskGraph.whenReady &amp;#123;taskGraph -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (taskGraph.hasTask(release)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;version&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;‘1.0’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;version&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;‘1.0-SNAPSHOT’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q distribution&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;We build &lt;span class=&quot;operator&quot;&gt;the&lt;/span&gt; zip &lt;span class=&quot;operator&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;-SNAPSHOT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -q release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;We build &lt;span class=&quot;operator&quot;&gt;the&lt;/span&gt; zip &lt;span class=&quot;operator&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;We release now&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构建脚本&quot;&gt;&lt;a href=&quot;#构建脚本&quot; class=&quot;headerlink&quot; title=&quot;构建脚本&quot;&gt;&lt;/a&gt;构建脚本&lt;/h3&gt;&lt;p&gt;task：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
    
      <category term="gradle" scheme="http://gcblog.cn/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>gradle配置开发流程</title>
    <link href="http://gcblog.cn/2015/12/02/gradle%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <id>http://gcblog.cn/2015/12/02/gradle配置开发流程/</id>
    <published>2015-12-02T09:18:20.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;p&gt;最近开始学习gradle的使用。今天跑起了第一个task。记录一下过程。&lt;/p&gt;
&lt;h3 id=&quot;Step-1&quot;&gt;&lt;a href=&quot;#Step-1&quot; class=&quot;headerlink&quot; title=&quot;Step 1&quot;&gt;&lt;/a&gt;Step 1&lt;/h3&gt;&lt;p&gt;下载地址:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://services.gradle.org/distributions/gradle-2.9-all.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Complete distribution&lt;/strong&gt;&lt;/a&gt; (binaries, sources and offline documentation)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://services.gradle.org/distributions/gradle-2.9-bin.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Binary only distribution&lt;/strong&gt;&lt;/a&gt; (no documentation or source code)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://services.gradle.org/distributions/gradle-2.9-src.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Gradle source code&lt;/strong&gt;&lt;/a&gt; (just the Gradle source code; not a usable Gradle installation)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://gongchaodemacbook-pro.local:62328/Dash/pghvcpxd/userguide/userguide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Step-2&quot;&gt;&lt;a href=&quot;#Step-2&quot; class=&quot;headerlink&quot; title=&quot;Step 2&quot;&gt;&lt;/a&gt;Step 2&lt;/h3&gt;&lt;p&gt;下载完解压缩，配置gralde命令路径&lt;/p&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim ~/.bash_profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=$&amp;#123;PATH&amp;#125;:~/mac/app/gradle-&lt;span class=&quot;number&quot;&gt;2.9&lt;/span&gt;/bin:&lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Step-3&quot;&gt;&lt;a href=&quot;#Step-3&quot; class=&quot;headerlink&quot; title=&quot;Step 3&quot;&gt;&lt;/a&gt;Step 3&lt;/h3&gt;&lt;p&gt;用gradle init来初始化当前目录生成gradle运行环境&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  &lt;span class=&quot;keyword&quot;&gt;mac&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;mkdir&lt;/span&gt; gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  &lt;span class=&quot;keyword&quot;&gt;mac&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:wrapper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BUILD SUCCESSFUL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Total&lt;/span&gt; time: 1.668 secs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This build could be faster, please consider using the Gradle Daemon: https:&lt;span class=&quot;comment&quot;&gt;//docs.gradle.org/2.9/userguide/gradle_daemon.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;至此gradle环境配置完成&lt;/p&gt;
&lt;h3 id=&quot;Step-4&quot;&gt;&lt;a href=&quot;#Step-4&quot; class=&quot;headerlink&quot; title=&quot;Step 4&quot;&gt;&lt;/a&gt;Step 4&lt;/h3&gt;&lt;p&gt;开始编写gradle文件&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;gradle&lt;/span&gt;  &lt;span class=&quot;tag&quot;&gt;vim&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.gradle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;build.gradle:&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; hello &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;doLast&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;‘Hello world!’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  gradle  gradle -&lt;span class=&quot;tag&quot;&gt;q&lt;/span&gt; hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello world!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;第一个Gradle Task finish！&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始学习gradle的使用。今天跑起了第一个task。记录一下过程。&lt;/p&gt;
&lt;h3 id=&quot;Step-1&quot;&gt;&lt;a href=&quot;#Step-1&quot; class=&quot;headerlink&quot; title=&quot;Step 1&quot;&gt;&lt;/a&gt;Step 1&lt;/h3&gt;&lt;p&gt;下载地址:&lt;/p&gt;

    
    </summary>
    
    
      <category term="gradle" scheme="http://gcblog.cn/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Android简洁架构设计</title>
    <link href="http://gcblog.cn/2015/11/29/Android%E7%AE%80%E6%B4%81%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://gcblog.cn/2015/11/29/Android简洁架构设计/</id>
    <published>2015-11-29T13:48:03.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;英文出处：fernandocejas.com。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;p&gt;我们知道编写高质量软件是既困难又复杂的：不仅是满足需求方面，还要健壮、可维护、可测试，并且足够灵活以适应增长和变化。这就是“代码整洁之道”的来源，并可以成为开发任何软件应用程序的良好方法。思想很简单：代码整洁之道代表构建系统的一组实践：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;独立于框架&lt;/li&gt;
&lt;li&gt;可测试性&lt;/li&gt;
&lt;li&gt;独立于UI&lt;/li&gt;
&lt;li&gt;独立于数据库&lt;/li&gt;
&lt;li&gt;独立于任何外部代理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2015/07/c169972aba197d0b1e79922aa554bfb7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;只限于使用图示中的4个圆圈并不是必须的，因为这只是语义描述，你还要考虑依赖规则（the Dependency Rule）：源码依赖只应该指向内圈，内圈不应该知道外圈的任何东西。&lt;/p&gt;
&lt;p&gt;下面的相关词汇可以帮助熟悉理解这个方法：&lt;/p&gt;
&lt;p&gt;实体（Entities）：应用的逻辑对象。&lt;br&gt;用例（Use Cases）：用例编排数据流从实体的流入和流出。也叫交互器（Interactor）。&lt;br&gt;接口适配器（Interface Adapters）：这些适配器将数据转换为用例和实体最合适的格式。表示器（Presenter）和控制器（Controller）就位于这里。&lt;br&gt;框架和驱动器（Frameworks and Drivers）：这是所有细节集中的地方，UI、工具、框架等。&lt;br&gt;为了更好更深入地理解，看下&lt;a href=&quot;http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Android架构&quot;&gt;&lt;a href=&quot;#Android架构&quot; class=&quot;headerlink&quot; title=&quot;Android架构&quot;&gt;&lt;/a&gt;Android架构&lt;/h3&gt;&lt;p&gt;架构的目标是通过将业务规则与外部世界隔离以分离关注点，这样，才可以在不依赖外部元素的情况下测试业务规则。为了达到这个目标，我的建议是将项目拆分为3个不同的层次，每层都有自己的目标，独立地工作。需要提及的是每层都使用自己的数据模型，这样才可以取得依赖（你可以看到，在代码中需要数据映射器（data mapper）来完成数据转换，不想在整个应用之上交叉使用自己的模型总要付出点代价）。下面是一个帮助你理解的模式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2015/07/c1f3d18f5be40e2e949bc7b1416ac5b1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意：我没有使用任何外部库（除了解析json数据的gson，还有测试用的junit、 mockito、 robolectri和espresso）。原因是这么做会让例子会更清楚。无论如何，一定不要犹豫使用那些让生活更美好的东西，比如添加ORM来存储磁盘数据，或者任何依赖注入框架，或者任何你熟悉的工具或库。（记住，重新发明轮子不是一个好的实践）。&lt;/p&gt;
&lt;h4 id=&quot;表示层&quot;&gt;&lt;a href=&quot;#表示层&quot; class=&quot;headerlink&quot; title=&quot;表示层&quot;&gt;&lt;/a&gt;表示层&lt;/h4&gt;&lt;p&gt;这里实现了与视图和动画有关的逻辑。它只使用一个模型-视图-表示器（Model View Presenter， 下文称&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVP&lt;/a&gt;），但是你可以使用其他任何模式，如MVC或MVVM。在这里我不会深入介绍，这里的片段和活动只有视图，除了UI逻辑之外没有任何其他逻辑，这也是所有渲染发生的地方。这层中的表示器与交互器（用例）共同在Android UI线程之外开启新线程执行这些工作，并通过回调来处理数据，数据将在视图中渲染。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2015/07/f0a7ef97b9d356c4eb8d20b196239b29.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果你想要一个使用MVP和MVVM更酷的&lt;a href=&quot;https://github.com/pedrovgs/EffectiveAndroidUI/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高效Android UI&lt;/a&gt;例子，去看看我朋友Pedro Gómez所做的工作。&lt;/p&gt;
&lt;h4 id=&quot;领域层&quot;&gt;&lt;a href=&quot;#领域层&quot; class=&quot;headerlink&quot; title=&quot;领域层&quot;&gt;&lt;/a&gt;领域层&lt;/h4&gt;&lt;p&gt;这里的业务规则：所有逻辑都在这层。至于Android项目，你也将会看到所有的交互器（用例）实现。这层是不依赖Android的纯Java模块。所有的外部组件使用接口连接到业务对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2015/07/1255acd8de2f6705b7963620823fc1d6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;数据层&quot;&gt;&lt;a href=&quot;#数据层&quot; class=&quot;headerlink&quot; title=&quot;数据层&quot;&gt;&lt;/a&gt;数据层&lt;/h4&gt;&lt;p&gt;应用需要的全部数据都来自这层，数据通过一个使用&lt;a href=&quot;http://martinfowler.com/eaaCatalog/repository.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;仓储模式（Repository Pattern）&lt;/a&gt;实现的UserRepository存取，其策略是通过一个工厂，根据特定的条件来选择不同的数据源。比如，当通过id获取用户时，如果用户已存在于缓存中，就会选取磁盘缓存数据源，不然就会查询云端获取数据，之后保存到磁盘缓存。这里的思想是，数据的来源对客户端是透明的，它不关系数据到底来自内存、磁盘还是云端，唯一的事实是数据将会到达，然后被获取。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://jbcdn2.b0.upaiyun.com/2015/07/c4dbed79c1a3c5a730c86f87eda5637e.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意：我使用文件系统和Android首选项实现了一个简单的磁盘缓存，仅用于学习目的。再次提醒，如果已经存在某些库可以更好地实现这些功能，你不应该重新发明轮子。&lt;/p&gt;
&lt;h3 id=&quot;错误处理&quot;&gt;&lt;a href=&quot;#错误处理&quot; class=&quot;headerlink&quot; title=&quot;错误处理&quot;&gt;&lt;/a&gt;错误处理&lt;/h3&gt;&lt;p&gt;这个话题很容易引发讨论，如果你能分享自己的解决方案会更棒。我的策略是采用回调，因此，一旦数据仓库有事件发生，回调包含2个方法onResponse()和onError()。最后一个将异常封装到称作“ErrorBundle“的包装类中：这种方法会带来很多难处，因为只有一个回调链，错误会一直到达表示层被渲染。代码可读性略显不佳。另外，我也可以实现一个事件总线系统，一旦出错就抛出事件，但是这个方案就像使用GOTO一样；我认为，有时候如果你订阅了多个事件，不仔细控制的话很容易迷失。&lt;/p&gt;
&lt;h3 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h3&gt;&lt;p&gt;关于测试，我倾向于根据不同层选择多重方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示层：使用Android instrumentation或espresso进行集成和功能测试。&lt;/li&gt;
&lt;li&gt;领域层：JUnit和mockito进行单元测试。&lt;/li&gt;
&lt;li&gt;数据层：Robolectric（由于这层有Android依赖）和junit、mockito进行集成和单元测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;代码展示&quot;&gt;&lt;a href=&quot;#代码展示&quot; class=&quot;headerlink&quot; title=&quot;代码展示&quot;&gt;&lt;/a&gt;代码展示&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/android10/Android-CleanArchitecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目录结构:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;presentation：表示层的Android模块。&lt;/li&gt;
&lt;li&gt;domain：无Android依赖的java模块。&lt;/li&gt;
&lt;li&gt;data：所有数据存放的Android模块。&lt;/li&gt;
&lt;li&gt;data-test：数据层的测试。由于使用Robolectric有些限制，我不得不在新的Java模块中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h3&gt;&lt;p&gt;就像Bob大叔说过的，“架构在于目的而非框架”，我完全赞同。当然，有很多不同的做事方式（不同的实现），我确定你（像我一样）每天都面对很多挑战，但是使用这些技巧，你可以保证应用将会：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易于维护。&lt;/li&gt;
&lt;li&gt;易于测试。&lt;/li&gt;
&lt;li&gt;非常内聚。&lt;/li&gt;
&lt;li&gt;解耦。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;链接和资源&quot;&gt;&lt;a href=&quot;#链接和资源&quot; class=&quot;headerlink&quot; title=&quot;链接和资源&quot;&gt;&lt;/a&gt;链接和资源&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/android10/Android-CleanArchitecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bob大叔的整洁架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/news/2013/07/architecture_intent_frameworks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;架构在于目的而非框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;模型 视图 表示器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://martinfowler.com/eaaCatalog/repository.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Martin Fowler仓储模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/PedroVicenteGmezSnch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android设计模式演示稿&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;英文出处：fernandocejas.com。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;p&gt;我们知道编写高质量软件是
    
    </summary>
    
    
      <category term="Android" scheme="http://gcblog.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Shell批量修改文件编码</title>
    <link href="http://gcblog.cn/2015/11/27/Shell%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81/"/>
    <id>http://gcblog.cn/2015/11/27/Shell批量修改文件编码/</id>
    <published>2015-11-27T06:07:34.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;第一个Shell脚本，很成功，值得记录一下。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;inputDir=&lt;code&gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;ls&amp;lt;/span&amp;gt; ~/&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;mac&amp;lt;/span&amp;gt;/temp/SDK\ v1.2.0.F源文件/&lt;/code&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;outDir=~/&lt;span class=&quot;keyword&quot;&gt;mac&lt;/span&gt;/temp/&lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;label&quot;&gt;$inputDir&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; new_file=&lt;span class=&quot;string&quot;&gt;“$outDir$file”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; iconv -f GBK -t UTF-8 &lt;span class=&quot;label&quot;&gt;$&amp;#123;file&amp;#125;&lt;/span&gt; &amp;gt; &lt;span class=&quot;label&quot;&gt;$&amp;#123;new_file&amp;#125;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;改进版&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;shebang&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DIR=&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 转换编码文件目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FT=&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 需要转换的文件类型（扩展名）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SE=&lt;span class=&quot;variable&quot;&gt;$3&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 原始编码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DE=&lt;span class=&quot;variable&quot;&gt;$4&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 目标编码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;code&gt;find &amp;lt;span class=&amp;quot;variable&amp;quot;&amp;gt;$DIR&amp;lt;/span&amp;gt; -type f -name &amp;lt;span class=&amp;quot;string&amp;quot;&amp;gt;&amp;quot;*.&amp;lt;span class=&amp;quot;variable&amp;quot;&amp;gt;$FT&amp;lt;/span&amp;gt;&amp;quot;&amp;lt;/span&amp;gt;&lt;/code&gt;; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“conversion &lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt; encoding &lt;span class=&quot;variable&quot;&gt;$SE&lt;/span&gt; to &lt;span class=&quot;variable&quot;&gt;$DE&lt;/span&gt;“&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    iconv &lt;span class=&quot;operator&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$SE&lt;/span&gt; -t &lt;span class=&quot;variable&quot;&gt;$DE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“&lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt;“&lt;/span&gt; &amp;gt; &lt;span class=&quot;string&quot;&gt;“&lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt;“&lt;/span&gt;.tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mv &lt;span class=&quot;operator&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;“&lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt;“&lt;/span&gt;.tmp &lt;span class=&quot;string&quot;&gt;“&lt;span class=&quot;variable&quot;&gt;$file&lt;/span&gt;“&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一个Shell脚本，很成功，值得记录一下。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;inputDir=&lt;cod
    
    </summary>
    
    
      <category term="Shell" scheme="http://gcblog.cn/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>AndroidAnnotations (九) - Event Handling</title>
    <link href="http://gcblog.cn/2015/11/25/AndroidAnnotations-%E4%B9%9D-Event-Handling/"/>
    <id>http://gcblog.cn/2015/11/25/AndroidAnnotations-九-Event-Handling/</id>
    <published>2015-11-25T01:54:42.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;ClickEvents&quot;&gt;&lt;a href=&quot;#ClickEvents&quot; class=&quot;headerlink&quot; title=&quot;ClickEvents&quot;&gt;&lt;/a&gt;ClickEvents&lt;/h3&gt;&lt;h4 id=&quot;Click&quot;&gt;&lt;a href=&quot;#Click&quot; class=&quot;headerlink&quot; title=&quot;@Click&quot;&gt;&lt;/a&gt;@Click&lt;/h4&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@Click&lt;/span&gt;(R.id.myButton)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;myButtonWasClicked&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr_selector&quot;&gt;[…]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@Click&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;anotherButton&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr_selector&quot;&gt;[…]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@Click&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;yetAnotherButton&lt;/span&gt;(View clickedView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr_selector&quot;&gt;[…]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@Click&lt;/span&gt;(&amp;#123;R.id.myButton, R.id.myOtherButton&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;handlesTwoButtons&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr_selector&quot;&gt;[…]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Other-events&quot;&gt;&lt;a href=&quot;#Other-events&quot; class=&quot;headerlink&quot; title=&quot;Other events&quot;&gt;&lt;/a&gt;Other events&lt;/h3&gt;&lt;p&gt;Currently, AndroidAnnotations supports the following &lt;a href=&quot;http://developer.android.com/guide/topics/ui/ui-events.html#EventListeners&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;events&lt;/a&gt; on views:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/View.OnClickListener.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clicks&lt;/a&gt; with @Click&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/View.OnLongClickListener.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Long clicks&lt;/a&gt; with @LongClick&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/View.OnTouchListener.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Touches&lt;/a&gt; with @Touch&lt;/p&gt;
&lt;h3 id=&quot;AdapterViewEvents&quot;&gt;&lt;a href=&quot;#AdapterViewEvents&quot; class=&quot;headerlink&quot; title=&quot;AdapterViewEvents&quot;&gt;&lt;/a&gt;AdapterViewEvents&lt;/h3&gt;&lt;p&gt;You can bind methods to handle events on items in an AdapterView:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/AdapterView.OnItemClickListener.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Item clicks&lt;/a&gt; with @ItemClick&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/AdapterView.OnItemLongClickListener.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Long item clicks&lt;/a&gt; with @ItemLongClick&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/AdapterView.OnItemSelectedListener.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Item selection&lt;/a&gt; with @ItemSelect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The annotation value should be one or several of R.id.&lt;em&gt; fields. If not set, the method name will be used as the R.id.&lt;/em&gt; field name.&lt;/p&gt;
&lt;p&gt;Methods annotated with @ItemClick or @ItemLongClick must have one parameter. This parameter can be of any type, it’s the object retrieved when calling adapter.getItem(position).&lt;/p&gt;
&lt;p&gt;Methods annotated with @ItemSelect may have one or two parameters. The first parameter must be a boolean, and the second is the object from the adapter, at the selected position.&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@EActivity&lt;/span&gt;(R.layout.my_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class MyListActivity extends Activity &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// …&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@ItemClick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void &lt;span class=&quot;function&quot;&gt;myListItemClicked&lt;/span&gt;(MyItem clickedItem) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@ItemLongClick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void &lt;span class=&quot;function&quot;&gt;myListItemLongClicked&lt;/span&gt;(MyItem clickedItem) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@ItemSelect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void &lt;span class=&quot;function&quot;&gt;myListItemSelected&lt;/span&gt;(boolean selected, MyItem selectedItem) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&amp;gt; Since AndroidAnnotations 2.4&lt;br&gt;&amp;gt;&lt;br&gt;&amp;gt; For &lt;code&gt;@ItemClick&lt;/code&gt;, &lt;code&gt;@ItemLongClick&lt;/code&gt; and &lt;code&gt;@ItemSelect&lt;/code&gt;, if the parameter is of type int, then the position is given instead of the object coming from the adapter.&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@EActivity&lt;/span&gt;(R.layout.my_list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class MyListActivity extends Activity &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// …&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@ItemClick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void &lt;span class=&quot;function&quot;&gt;myListItemClicked&lt;/span&gt;(int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@ItemLongClick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void &lt;span class=&quot;function&quot;&gt;myListItemLongClicked&lt;/span&gt;(int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@ItemSelect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void &lt;span class=&quot;function&quot;&gt;myListItemSelected&lt;/span&gt;(boolean selected, int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;TextChangeEvents&quot;&gt;&lt;a href=&quot;#TextChangeEvents&quot; class=&quot;headerlink&quot; title=&quot;TextChangeEvents&quot;&gt;&lt;/a&gt;TextChangeEvents&lt;/h3&gt;&lt;h4 id=&quot;TextChange&quot;&gt;&lt;a href=&quot;#TextChange&quot; class=&quot;headerlink&quot; title=&quot;@TextChange&quot;&gt;&lt;/a&gt;@TextChange&lt;/h4&gt;&lt;p&gt;This annotation is intended to be used on methods to receive events defined by &lt;code&gt;android.text.TextWatcher.onTextChanged(CharSequence s, int start, int before, int count)&lt;/code&gt;when the text is changed on the targeted TextView or subclass of TextView. The annotation value should be one or several R.id.&lt;em&gt; fields that refers to TextView or subclasses of TextView. If not set, the &lt;a href=&quot;https://github.com/excilys/androidannotations/wiki/InferringIDFromMethodName&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;method name&lt;/a&gt; will be used as the R.id.&lt;/em&gt; field name. The method may have multiple parameter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;android.widget.TextView&lt;/code&gt; parameter to know which view has received this event&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;java.lang.CharSequence&lt;/code&gt; parameter to get the modified text.&lt;/li&gt;
&lt;li&gt;An int parameter named start to get the start position of the modified text.&lt;/li&gt;
&lt;li&gt;An int parameter named before to know the text length before modification.&lt;/li&gt;
&lt;li&gt;An int parameter named count to know the number of modified characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some usage examples of &lt;code&gt;@BeforeTextChange&lt;/code&gt; annotation:&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@TextChange&lt;/span&gt;(R.id.helloTextView)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;onTextChangesOnHelloTextView&lt;/span&gt;(CharSequence text, TextView hello, int before, int start, int count) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@TextChange&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;helloTextViewTextChanged&lt;/span&gt;(TextView hello) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@TextChange&lt;/span&gt;(&amp;#123;R.id.editText, R.id.helloTextView&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;onTextChangesOnSomeTextViews&lt;/span&gt;(TextView tv, CharSequence text) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@TextChange&lt;/span&gt;(R.id.helloTextView)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;onTextChangesOnHelloTextView&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;BeforeTextChange&quot;&gt;&lt;a href=&quot;#BeforeTextChange&quot; class=&quot;headerlink&quot; title=&quot;@BeforeTextChange&quot;&gt;&lt;/a&gt;@BeforeTextChange&lt;/h4&gt;&lt;p&gt;This annotation is intended to be used on methods to receive events defined by android.text.TextWatcher.beforeTextChanged(CharSequence s, int start, int count, int after) before the text is changed on the targeted TextView or subclass of TextView. The annotation value should be one or several R.id.&lt;em&gt; fields that refers to TextView or subclasses of TextView. If not set, the &lt;a href=&quot;https://github.com/excilys/androidannotations/wiki/InferringIDFromMethodName&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;method name&lt;/a&gt; will be used as the R.id.&lt;/em&gt; field name. The method may have multiple parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;android.widget.TextView&lt;/code&gt; parameter to know which view has targeted this event&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;java.lang.CharSequence&lt;/code&gt; parameter to get the text before modification.&lt;/li&gt;
&lt;li&gt;An int parameter named start to get the start position of the modified text.&lt;/li&gt;
&lt;li&gt;An int parameter named count to know the number of modified characters.&lt;/li&gt;
&lt;li&gt;An int parameter named after to know the text length after the text modification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some usage examples of &lt;code&gt;@BeforeTextChange&lt;/code&gt; annotation:&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@BeforeTextChange&lt;/span&gt;(R.id.helloTextView)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;beforeTextChangedOnHelloTextView&lt;/span&gt;(TextView hello, CharSequence text, int start, int count, int after) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@BeforeTextChange&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;helloTextViewBeforeTextChanged&lt;/span&gt;(TextView hello) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@BeforeTextChange&lt;/span&gt;(&amp;#123;R.id.editText, R.id.helloTextView&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;beforeTextChangedOnSomeTextViews&lt;/span&gt;(TextView tv, CharSequence text) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@BeforeTextChange&lt;/span&gt;(R.id.helloTextView)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;beforeTextChangedOnHelloTextView&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;AfterTextChange&quot;&gt;&lt;a href=&quot;#AfterTextChange&quot; class=&quot;headerlink&quot; title=&quot;@AfterTextChange&quot;&gt;&lt;/a&gt;@AfterTextChange&lt;/h4&gt;&lt;p&gt;This annotation is intended to be used on methods to receive events defined by &lt;code&gt;android.text.TextWatcher.afterTextChanged(Editable s)&lt;/code&gt; after the text is changed on the targeted TextView or subclass of TextView. The annotation value should be one or several &lt;code&gt;R.id.*&lt;/code&gt; fields that refers to TextView or subclasses of TextView. If not set, the &lt;a href=&quot;https://github.com/excilys/androidannotations/wiki/InferringIDFromMethodName&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;method name&lt;/a&gt; will be used as the &lt;code&gt;R.id.*&lt;/code&gt; field name. The method may have multiple parameter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;android.widget.TextView&lt;/code&gt; parameter to know which view has targeted this event&lt;/li&gt;
&lt;li&gt;&lt;code&gt;An android.text.Editable&lt;/code&gt; to make changes on modified text.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some usage examples of &lt;code&gt;@BeforeTextChange&lt;/code&gt; annotation :&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@AfterTextChange&lt;/span&gt;(R.id.helloTextView)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;afterTextChangedOnHelloTextView&lt;/span&gt;(Editable text, TextView hello) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@AfterTextChange&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;helloTextViewAfterTextChanged&lt;/span&gt;(TextView hello) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@AfterTextChange&lt;/span&gt;(&amp;#123;R.id.editText, R.id.helloTextView&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;afterTextChangedOnSomeTextViews&lt;/span&gt;(TextView tv, Editable text) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@AfterTextChange&lt;/span&gt;(R.id.helloTextView)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;afterTextChangedOnHelloTextView&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;EditorAction&quot;&gt;&lt;a href=&quot;#EditorAction&quot; class=&quot;headerlink&quot; title=&quot;@EditorAction&quot;&gt;&lt;/a&gt;@EditorAction&lt;/h4&gt;&lt;p&gt;This annotation is intended to be used on methods to receive events defined by &lt;code&gt;android.widget.TextView.OnEditorActionListener#onEditorAction(android.widget.TextView, int, android.view.KeyEvent)&lt;/code&gt; when an action is performed on the editor.&lt;/p&gt;
&lt;p&gt;The annotation value should be one or several R.id.&lt;em&gt; fields that refers to TextView or subclasses of &lt;code&gt;TextView&lt;/code&gt;. If not set, the &lt;a href=&quot;https://github.com/excilys/androidannotations/wiki/InferringIDFromMethodName&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;method name&lt;/a&gt; will be used as the R.id.&lt;/em&gt; field name.&lt;/p&gt;
&lt;p&gt;The method may have multiple parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;android.widget.TextView&lt;/code&gt; parameter to know which view has targeted this event.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;int&lt;/code&gt; parameter to get the &lt;code&gt;actionId&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;android.view.KeyEvent&lt;/code&gt; parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The return type of the method can be either &lt;code&gt;void&lt;/code&gt; or &lt;code&gt;boolean&lt;/code&gt;. In case of &lt;code&gt;boolean&lt;/code&gt;, the value returned from the annotated method will be returned in the generated listener method (indicating event consumption). If the annotated method is &lt;code&gt;void&lt;/code&gt;, always &lt;code&gt;true&lt;/code&gt; will be returned in the listener method (so the event is consumed).&lt;/p&gt;
&lt;p&gt;Some usage examples of &lt;code&gt;@EditorAction&lt;/code&gt; annotation:&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@EditorAction&lt;/span&gt;(R.id.helloTextView)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onEditorActionsOnHelloTextView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TextView hello, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; actionId, KeyEvent keyEvent)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@EditorAction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helloTextViewEditorAction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TextView hello)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@EditorAction&lt;/span&gt;(&amp;#123;R.id.editText, R.id.helloTextView&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onEditorActionsOnSomeTextViews&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TextView tv, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; actionId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@EditorAction&lt;/span&gt;(R.id.helloTextView)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onEditorActionsOnHelloTextView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@EditorAction&lt;/span&gt;(R.id.helloTextView)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onEditorActionsOnHelloTextView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Something Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Handling-options-menu&quot;&gt;&lt;a href=&quot;#Handling-options-menu&quot; class=&quot;headerlink&quot; title=&quot;Handling options menu&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/excilys/androidannotations/wiki/Handling%20Options%20Menu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Handling options menu&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;KeyEvents&quot;&gt;&lt;a href=&quot;#KeyEvents&quot; class=&quot;headerlink&quot; title=&quot;KeyEvents&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/excilys/androidannotations/wiki/KeyEvents&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KeyEvents&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;SeekBarEvents&quot;&gt;&lt;a href=&quot;#SeekBarEvents&quot; class=&quot;headerlink&quot; title=&quot;SeekBarEvents&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/excilys/androidannotations/wiki/SeekBarEvents&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SeekBarEvents&lt;/a&gt;&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ClickEvents&quot;&gt;&lt;a href=&quot;#ClickEvents&quot; class=&quot;headerlink&quot; title=&quot;ClickEvents&quot;&gt;&lt;/a&gt;ClickEvents&lt;/h3&gt;&lt;h4 id=&quot;Click&quot;&gt;&lt;a href=&quot;#Click&quot; class
    
    </summary>
    
    
      <category term="Android" scheme="http://gcblog.cn/tags/Android/"/>
    
      <category term="AndroidAnnotations" scheme="http://gcblog.cn/tags/AndroidAnnotations/"/>
    
  </entry>
  
  <entry>
    <title>AndroidAnnotations (十) - Trace</title>
    <link href="http://gcblog.cn/2015/11/25/AndroidAnnotations-%E5%8D%81-Trace/"/>
    <id>http://gcblog.cn/2015/11/25/AndroidAnnotations-十-Trace/</id>
    <published>2015-11-25T01:54:02.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h3&gt;&lt;p&gt;The @Trace annotation allows you to trace the execution of a method by writing log entries.&lt;/p&gt;
&lt;p&gt;The method must not be private.&lt;/p&gt;
&lt;p&gt;Usage examples:&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@Trace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;function&quot;&gt;doWork&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// … Do Work …&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@Trace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boolean &lt;span class=&quot;function&quot;&gt;doMoreWork&lt;/span&gt;(String someString) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// … Do more Work …&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Will generate the following log entries for &lt;code&gt;doWork()&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;I/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;TracedMethodActivity&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(  &lt;span class=&quot;number&quot;&gt;302&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: Entering [void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;TracedMethodActivity&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(  &lt;span class=&quot;number&quot;&gt;302&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: Exiting [void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; ], duration &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ms: &lt;span class=&quot;number&quot;&gt;1002&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And this log entries for &lt;code&gt;doMoreWork()&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Since AndroidAnnotations 3.1&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;I/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;TracedMethodActivity&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(  &lt;span class=&quot;number&quot;&gt;302&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: Entering [boolean &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;doMoreWork&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(someString = Hello World)&lt;/span&gt;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;TracedMethodActivity&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(  &lt;span class=&quot;number&quot;&gt;302&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: Exiting [boolean &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;doMoreWork&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String)&lt;/span&gt;&lt;/span&gt; returning: true], duration &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ms: &lt;span class=&quot;number&quot;&gt;651&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/blockquote&gt;
&lt;p&gt;Customization:&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Trace&lt;/span&gt;(tag=&lt;span class=&quot;string&quot;&gt;“CustomTag”&lt;/span&gt;, level=Log.WARN)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// … Do Work …&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Trace&quot;&gt;&lt;a href=&quot;#Trace&quot; class=&quot;headerlink&quot; title=&quot;Trace&quot;&gt;&lt;/a&gt;Trace&lt;/h3&gt;&lt;p&gt;The @Trace annotation allows you to trace the execution of
    
    </summary>
    
    
      <category term="Android" scheme="http://gcblog.cn/tags/Android/"/>
    
      <category term="AndroidAnnotations" scheme="http://gcblog.cn/tags/AndroidAnnotations/"/>
    
  </entry>
  
  <entry>
    <title>AndroidAnnotations (八) - SharedPreferences</title>
    <link href="http://gcblog.cn/2015/11/25/AndroidAnnotations-%E5%85%AB-SharedPreferences/"/>
    <id>http://gcblog.cn/2015/11/25/AndroidAnnotations-八-SharedPreferences/</id>
    <published>2015-11-25T00:11:04.000Z</published>
    <updated>2016-03-06T05:38:40.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Defining-the-preferences&quot;&gt;&lt;a href=&quot;#Defining-the-preferences&quot; class=&quot;headerlink&quot; title=&quot;Defining the preferences&quot;&gt;&lt;/a&gt;Defining the preferences&lt;/h3&gt;&lt;p&gt;First, you should create an interface annotated with &lt;code&gt;@SharedPref&lt;/code&gt; to define the SharedPreferences :&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@SharedPref&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyPrefs&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// The field name will have default value “John”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@DefaultString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;“John”&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// The field age will have default value 42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@DefaultInt&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// The field lastUpdated will have default value 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lastUpdated&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Based on that specification, AndroidAnnotations builds a SharedPreferences Helper that has the same name plus an underscore. You can get an instance of the generated helper in any enhanced class with the &lt;code&gt;@Pref&lt;/code&gt; annotation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: The type of the field &lt;strong&gt;MUST&lt;/strong&gt; be the generated class instead of the source class. It’s the only exception in AA.&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@EActivity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Pref&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;MyPrefs_&lt;/span&gt; myPrefs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// …&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can then start using it:&lt;/p&gt;
&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Simple edit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myPrefs.name().put(&lt;span class=&quot;string&quot;&gt;“John”&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Batch edit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myPrefs.edit()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .name()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .put(&lt;span class=&quot;string&quot;&gt;“John”&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .age()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .put(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .apply();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Preference clearing:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myPrefs.&lt;span class=&quot;built_in&quot;&gt;clear&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Check if a value exists:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;boolean&lt;/span&gt; nameExists = myPrefs.name().exists();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Reading a value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; lastUpdated = myPrefs.lastUpdated().&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Reading a value and providing a fallback default value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; now = System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; lastUpdated = myPrefs.lastUpdated().getOr(now);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Default-resource-value&quot;&gt;&lt;a href=&quot;#Default-resource-value&quot; class=&quot;headerlink&quot; title=&quot;Default resource value&quot;&gt;&lt;/a&gt;Default resource value&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Since AndroidAnnotations 3.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s now possible to inject a default value from Android resources with &lt;code&gt;@DefaultRes&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;@SharedPref&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public interface MyPrefs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;@DefaultRes&lt;/span&gt;(R.&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;.defaultPrefName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; resourceName()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;constant&quot;&gt;@DefaultRes&lt;/span&gt; // uses &lt;span class=&quot;string&quot;&gt;‘R.string.defaultPrefAge’&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; set &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; defaultPrefAge()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;String-resource-as-preference-key&quot;&gt;&lt;a href=&quot;#String-resource-as-preference-key&quot; class=&quot;headerlink&quot; title=&quot;String resource as preference key&quot;&gt;&lt;/a&gt;String resource as preference key&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Since AndroidAnnotations 3.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can specify a String resource by its id to be used as the preference key instead of the method name. This is useful when you specify your preferences in an xml file, and you use String resource keys there. Example:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@SharedPref&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyPrefs&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @DefaultString(&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;“John”&lt;/span&gt;, keyRes = R.&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.myPrefKey)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @DefaultRes(keyRes = R.&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.myOtherPrefKey)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;defaultPrefAge&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Scope&quot;&gt;&lt;a href=&quot;#Scope&quot; class=&quot;headerlink&quot; title=&quot;Scope&quot;&gt;&lt;/a&gt;Scope&lt;/h3&gt;&lt;p&gt;Observe that you can name the shared preference by setting &lt;code&gt;value&lt;/code&gt; to one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ACTIVITY&lt;/code&gt;, for a shared preference named &lt;code&gt;MyActivity_MyPrefs&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ACTIVITY_DEFAULT&lt;/code&gt;, for a shared preference named &lt;code&gt;MyActivity&lt;/code&gt; (also available through &lt;code&gt;activity.getPreferences()&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;APPLICATION_DEFAULT&lt;/code&gt;, for the default &lt;code&gt;SharedPreference&lt;/code&gt; or &lt;code&gt;UNIQUE&lt;/code&gt;, for a shared preference named &lt;code&gt;MyPrefs&lt;/code&gt;.&lt;br&gt;Therefore, if a single shared preference is needed for the interface defined, in order to all activities of a given application to share the same preferences, the following should be used:&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@SharedPref(&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;=SharedPref.Scope.UNIQUE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyPrefs&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Using-it-with-a-PreferenceActivity&quot;&gt;&lt;a href=&quot;#Using-it-with-a-PreferenceActivity&quot; class=&quot;headerlink&quot; title=&quot;Using it with a PreferenceActivity&quot;&gt;&lt;/a&gt;Using it with a &lt;code&gt;PreferenceActivity&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The Android &lt;code&gt;PreferenceActivity&lt;/code&gt; or &lt;code&gt;PreferenceFragment&lt;/code&gt; can edit the values of your shared preferences.&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@SharedPref&lt;/span&gt;(SharedPref.Scope.UNIQUE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyPrefs&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt; PREF_NAME = &lt;span class=&quot;string&quot;&gt;“MyPrefs”&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// in onCreate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Using your MyPrefs values &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getPreferenceManager().setSharedPreferencesName(PREF_NAME);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Opening the layout &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addPreferencesFromResource(R.xml.prefs);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Defining-the-preferences&quot;&gt;&lt;a href=&quot;#Defining-the-preferences&quot; class=&quot;headerlink&quot; title=&quot;Defining the preferences&quot;&gt;&lt;/a&gt;Defining the p
    
    </summary>
    
    
      <category term="Android" scheme="http://gcblog.cn/tags/Android/"/>
    
      <category term="AndroidAnnotations" scheme="http://gcblog.cn/tags/AndroidAnnotations/"/>
    
  </entry>
  
</feed>
